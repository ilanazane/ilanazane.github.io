<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-02-10T16:11:48-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ilana Zane</title><subtitle>A blog about AI and other interests </subtitle><entry><title type="html">Creating a Recommendation System</title><link href="http://localhost:4000/projects/2025/02/10/recommender.html" rel="alternate" type="text/html" title="Creating a Recommendation System" /><published>2025-02-10T00:00:00-05:00</published><updated>2025-02-10T00:00:00-05:00</updated><id>http://localhost:4000/projects/2025/02/10/recommender</id><content type="html" xml:base="http://localhost:4000/projects/2025/02/10/recommender.html"><![CDATA[<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span> 
<span class="kn">from</span> <span class="n">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">LabelEncoder</span>
<span class="kn">from</span> <span class="n">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
</code></pre></div></div>

<h1 id="-load-and-preprocess-data">üìå Load and Preprocess Data</h1>

<p>We are going to use the <a href="https://grouplens.org/datasets/movielens/" target="_blank"> MovieLens Dataset </a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ratings</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">ml-latest-small/ratings.csv</span><span class="sh">"</span><span class="p">)</span>
<span class="n">movies</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">ml-latest-small/movies.csv</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">display</span><span class="p">(</span><span class="n">ratings</span><span class="p">.</span><span class="nf">head</span><span class="p">())</span>
<span class="nf">display</span><span class="p">(</span><span class="n">movies</span><span class="p">.</span><span class="nf">head</span><span class="p">())</span>
</code></pre></div></div>
<p>Ratings:</p>
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>userId</th>
      <th>movieId</th>
      <th>rating</th>
      <th>timestamp</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>1</td>
      <td>4.0</td>
      <td>964982703</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>3</td>
      <td>4.0</td>
      <td>964981247</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>6</td>
      <td>4.0</td>
      <td>964982224</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>47</td>
      <td>5.0</td>
      <td>964983815</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>50</td>
      <td>5.0</td>
      <td>964982931</td>
    </tr>
  </tbody>
</table>
</div>

<p>Movies</p>
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>movieId</th>
      <th>title</th>
      <th>genres</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>Toy Story (1995)</td>
      <td>Adventure|Animation|Children|Comedy|Fantasy</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>Jumanji (1995)</td>
      <td>Adventure|Children|Fantasy</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>Grumpier Old Men (1995)</td>
      <td>Comedy|Romance</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>Waiting to Exhale (1995)</td>
      <td>Comedy|Drama|Romance</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>Father of the Bride Part II (1995)</td>
      <td>Comedy</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># merge datasets 
</span><span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">ratings</span><span class="p">,</span><span class="n">movies</span><span class="p">,</span><span class="n">on</span><span class="o">=</span><span class="sh">"</span><span class="s">movieId</span><span class="sh">"</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">timestamp</span><span class="sh">"</span><span class="p">])</span>
<span class="n">data</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>userId</th>
      <th>movieId</th>
      <th>rating</th>
      <th>title</th>
      <th>genres</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>1</td>
      <td>4.0</td>
      <td>Toy Story (1995)</td>
      <td>Adventure|Animation|Children|Comedy|Fantasy</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>3</td>
      <td>4.0</td>
      <td>Grumpier Old Men (1995)</td>
      <td>Comedy|Romance</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>6</td>
      <td>4.0</td>
      <td>Heat (1995)</td>
      <td>Action|Crime|Thriller</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>47</td>
      <td>5.0</td>
      <td>Seven (a.k.a. Se7en) (1995)</td>
      <td>Mystery|Thriller</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>50</td>
      <td>5.0</td>
      <td>Usual Suspects, The (1995)</td>
      <td>Crime|Mystery|Thriller</td>
    </tr>
  </tbody>
</table>
</div>

<h2 id="why-do-we-encode">‚ùìWhy do we encode?</h2>
<p>The reason that we need to encode userId and movieId is that, while they are numerical, they do not have a meaningful ordinal relationship. For example, <code class="language-plaintext highlighter-rouge">movieId = 500</code> isn‚Äôt ‚Äúcloser‚Äù to <code class="language-plaintext highlighter-rouge">movieId = 501</code>.</p>

<p>Encoding also reduces memory usage. For example, if <code class="language-plaintext highlighter-rouge">userId</code> ranges from 1 to 10000, but there are only 100 users in the dataset, the encodinig will map them from 0 to 99, reducing memory usage and reducing training time.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># encode categorical features 
</span><span class="n">user_encoder</span> <span class="o">=</span> <span class="nc">LabelEncoder</span><span class="p">()</span>
<span class="n">movie_encoder</span> <span class="o">=</span> <span class="nc">LabelEncoder</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">userId</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">user_encoder</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">userId</span><span class="sh">'</span><span class="p">])</span>
<span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">movieId</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">movie_encoder</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">movieId</span><span class="sh">'</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>userId</th>
      <th>movieId</th>
      <th>rating</th>
      <th>title</th>
      <th>genres</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>0</td>
      <td>4.0</td>
      <td>Toy Story (1995)</td>
      <td>Adventure|Animation|Children|Comedy|Fantasy</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0</td>
      <td>2</td>
      <td>4.0</td>
      <td>Grumpier Old Men (1995)</td>
      <td>Comedy|Romance</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0</td>
      <td>5</td>
      <td>4.0</td>
      <td>Heat (1995)</td>
      <td>Action|Crime|Thriller</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0</td>
      <td>43</td>
      <td>5.0</td>
      <td>Seven (a.k.a. Se7en) (1995)</td>
      <td>Mystery|Thriller</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0</td>
      <td>46</td>
      <td>5.0</td>
      <td>Usual Suspects, The (1995)</td>
      <td>Crime|Mystery|Thriller</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create train-test split 
</span><span class="n">train_data</span><span class="p">,</span> <span class="n">test_data</span> <span class="o">=</span> <span class="nf">train_test_split</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span> <span class="mf">0.2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span> <span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">train_data</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">test_data</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>80668
20168
</code></pre></div></div>

<h1 id="-train-random-forest-model-for-rating-prediction">üìå Train Random Forest Model for Rating Prediction</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">RandomForestRegressor</span>
<span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">root_mean_squared_error</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># define features and target variables 
</span><span class="n">x_train</span><span class="p">,</span> <span class="n">x_test</span> <span class="o">=</span> <span class="n">train_data</span><span class="p">[[</span><span class="sh">"</span><span class="s">userId</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">movieId</span><span class="sh">"</span><span class="p">]],</span> <span class="n">test_data</span><span class="p">[[</span><span class="sh">"</span><span class="s">userId</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">movieId</span><span class="sh">"</span><span class="p">]]</span>
<span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">train_data</span><span class="p">[</span><span class="sh">"</span><span class="s">rating</span><span class="sh">"</span><span class="p">],</span> <span class="n">test_data</span><span class="p">[</span><span class="sh">"</span><span class="s">rating</span><span class="sh">"</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># train random forest regressor model 
</span>
<span class="n">model</span> <span class="o">=</span> <span class="nc">RandomForestRegressor</span><span class="p">(</span><span class="n">n_estimators</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span><span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">x_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">)</span>

</code></pre></div></div>

<style>#sk-container-id-5 {
  /* Definition of color scheme common for light and dark mode */
  --sklearn-color-text: black;
  --sklearn-color-line: gray;
  /* Definition of color scheme for unfitted estimators */
  --sklearn-color-unfitted-level-0: #fff5e6;
  --sklearn-color-unfitted-level-1: #f6e4d2;
  --sklearn-color-unfitted-level-2: #ffe0b3;
  --sklearn-color-unfitted-level-3: chocolate;
  /* Definition of color scheme for fitted estimators */
  --sklearn-color-fitted-level-0: #f0f8ff;
  --sklearn-color-fitted-level-1: #d4ebff;
  --sklearn-color-fitted-level-2: #b3dbfd;
  --sklearn-color-fitted-level-3: cornflowerblue;

  /* Specific color for light theme */
  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-icon: #696969;

  @media (prefers-color-scheme: dark) {
    /* Redefinition of color scheme for dark theme */
    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-icon: #878787;
  }
}

#sk-container-id-5 {
  color: var(--sklearn-color-text);
}

#sk-container-id-5 pre {
  padding: 0;
}

#sk-container-id-5 input.sk-hidden--visually {
  border: 0;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

#sk-container-id-5 div.sk-dashed-wrapped {
  border: 1px dashed var(--sklearn-color-line);
  margin: 0 0.4em 0.5em 0.4em;
  box-sizing: border-box;
  padding-bottom: 0.4em;
  background-color: var(--sklearn-color-background);
}

#sk-container-id-5 div.sk-container {
  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
     but bootstrap.min.css set `[hidden] { display: none !important; }`
     so we also need the `!important` here to be able to override the
     default hidden behavior on the sphinx rendered scikit-learn.org.
     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
  display: inline-block !important;
  position: relative;
}

#sk-container-id-5 div.sk-text-repr-fallback {
  display: none;
}

div.sk-parallel-item,
div.sk-serial,
div.sk-item {
  /* draw centered vertical line to link estimators */
  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
  background-size: 2px 100%;
  background-repeat: no-repeat;
  background-position: center center;
}

/* Parallel-specific style estimator block */

#sk-container-id-5 div.sk-parallel-item::after {
  content: "";
  width: 100%;
  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
  flex-grow: 1;
}

#sk-container-id-5 div.sk-parallel {
  display: flex;
  align-items: stretch;
  justify-content: center;
  background-color: var(--sklearn-color-background);
  position: relative;
}

#sk-container-id-5 div.sk-parallel-item {
  display: flex;
  flex-direction: column;
}

#sk-container-id-5 div.sk-parallel-item:first-child::after {
  align-self: flex-end;
  width: 50%;
}

#sk-container-id-5 div.sk-parallel-item:last-child::after {
  align-self: flex-start;
  width: 50%;
}

#sk-container-id-5 div.sk-parallel-item:only-child::after {
  width: 0;
}

/* Serial-specific style estimator block */

#sk-container-id-5 div.sk-serial {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--sklearn-color-background);
  padding-right: 1em;
  padding-left: 1em;
}


/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
clickable and can be expanded/collapsed.
- Pipeline and ColumnTransformer use this feature and define the default style
- Estimators will overwrite some part of the style using the `sk-estimator` class
*/

/* Pipeline and ColumnTransformer style (default) */

#sk-container-id-5 div.sk-toggleable {
  /* Default theme specific background. It is overwritten whether we have a
  specific estimator or a Pipeline/ColumnTransformer */
  background-color: var(--sklearn-color-background);
}

/* Toggleable label */
#sk-container-id-5 label.sk-toggleable__label {
  cursor: pointer;
  display: block;
  width: 100%;
  margin-bottom: 0;
  padding: 0.5em;
  box-sizing: border-box;
  text-align: center;
}

#sk-container-id-5 label.sk-toggleable__label-arrow:before {
  /* Arrow on the left of the label */
  content: "‚ñ∏";
  float: left;
  margin-right: 0.25em;
  color: var(--sklearn-color-icon);
}

#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {
  color: var(--sklearn-color-text);
}

/* Toggleable content - dropdown */

#sk-container-id-5 div.sk-toggleable__content {
  max-height: 0;
  max-width: 0;
  overflow: hidden;
  text-align: left;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-5 div.sk-toggleable__content.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-5 div.sk-toggleable__content pre {
  margin: 0.2em;
  border-radius: 0.25em;
  color: var(--sklearn-color-text);
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-5 div.sk-toggleable__content.fitted pre {
  /* unfitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {
  /* Expand drop-down */
  max-height: 200px;
  max-width: 100%;
  overflow: auto;
}

#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
  content: "‚ñæ";
}

/* Pipeline/ColumnTransformer-specific style */

#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator-specific style */

/* Colorize estimator box */
#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

#sk-container-id-5 div.sk-label label.sk-toggleable__label,
#sk-container-id-5 div.sk-label label {
  /* The background is the default theme color */
  color: var(--sklearn-color-text-on-default-background);
}

/* On hover, darken the color of the background */
#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

/* Label box, darken color on hover, fitted */
#sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator label */

#sk-container-id-5 div.sk-label label {
  font-family: monospace;
  font-weight: bold;
  display: inline-block;
  line-height: 1.2em;
}

#sk-container-id-5 div.sk-label-container {
  text-align: center;
}

/* Estimator-specific */
#sk-container-id-5 div.sk-estimator {
  font-family: monospace;
  border: 1px dotted var(--sklearn-color-border-box);
  border-radius: 0.25em;
  box-sizing: border-box;
  margin-bottom: 0.5em;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-5 div.sk-estimator.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

/* on hover */
#sk-container-id-5 div.sk-estimator:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-5 div.sk-estimator.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Specification for estimator info (e.g. "i" and "?") */

/* Common style for "i" and "?" */

.sk-estimator-doc-link,
a:link.sk-estimator-doc-link,
a:visited.sk-estimator-doc-link {
  float: right;
  font-size: smaller;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1em;
  height: 1em;
  width: 1em;
  text-decoration: none !important;
  margin-left: 1ex;
  /* unfitted */
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
  color: var(--sklearn-color-unfitted-level-1);
}

.sk-estimator-doc-link.fitted,
a:link.sk-estimator-doc-link.fitted,
a:visited.sk-estimator-doc-link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
div.sk-estimator:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover,
div.sk-label-container:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover,
div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

/* Span, style for the box shown on hovering the info icon */
.sk-estimator-doc-link span {
  display: none;
  z-index: 9999;
  position: relative;
  font-weight: normal;
  right: .2ex;
  padding: .5ex;
  margin: .5ex;
  width: min-content;
  min-width: 20ex;
  max-width: 50ex;
  color: var(--sklearn-color-text);
  box-shadow: 2pt 2pt 4pt #999;
  /* unfitted */
  background: var(--sklearn-color-unfitted-level-0);
  border: .5pt solid var(--sklearn-color-unfitted-level-3);
}

.sk-estimator-doc-link.fitted span {
  /* fitted */
  background: var(--sklearn-color-fitted-level-0);
  border: var(--sklearn-color-fitted-level-3);
}

.sk-estimator-doc-link:hover span {
  display: block;
}

/* "?"-specific style due to the `<a>` HTML tag */

#sk-container-id-5 a.estimator_doc_link {
  float: right;
  font-size: 1rem;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1rem;
  height: 1rem;
  width: 1rem;
  text-decoration: none;
  /* unfitted */
  color: var(--sklearn-color-unfitted-level-1);
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
}

#sk-container-id-5 a.estimator_doc_link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
#sk-container-id-5 a.estimator_doc_link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

#sk-container-id-5 a.estimator_doc_link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
}
</style>
<div id="sk-container-id-5" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>RandomForestRegressor(n_estimators=50, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-7" type="checkbox" checked="" /><label for="sk-estimator-id-7" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;&nbsp;RandomForestRegressor<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.ensemble.RandomForestRegressor.html">?<span>Documentation for RandomForestRegressor</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label><div class="sk-toggleable__content fitted"><pre>RandomForestRegressor(n_estimators=50, random_state=42)</pre></div> </div></div></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># evaluate model 
</span><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span> 

<span class="n">y_pred</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">x_test</span><span class="p">)</span>
<span class="n">rmse</span> <span class="o">=</span> <span class="nf">root_mean_squared_error</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span><span class="n">y_pred</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">RMSE:</span><span class="sh">'</span><span class="p">,</span> <span class="n">rmse</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RMSE: 1.0604925210240557
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create a baseline model 
# baseline model: predict average rating for all movies 
</span>
<span class="n">baseline_pred</span> <span class="o">=</span> <span class="n">ratings</span><span class="p">[</span><span class="sh">'</span><span class="s">rating</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">()</span>
<span class="n">baseline_rmse</span> <span class="o">=</span> <span class="nf">root_mean_squared_error</span><span class="p">(</span><span class="n">test_data</span><span class="p">[</span><span class="sh">'</span><span class="s">rating</span><span class="sh">'</span><span class="p">],[</span><span class="n">baseline_pred</span><span class="p">]</span><span class="o">*</span><span class="nf">len</span><span class="p">(</span><span class="n">test_data</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Baseline RMSE:</span><span class="sh">'</span><span class="p">,</span> <span class="n">baseline_rmse</span><span class="p">)</span>


</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Baseline RMSE: 1.0488361768130714
</code></pre></div></div>

<p>We can see that the RMSE of our model is close to the baseline, but performs just slightly below. Let‚Äôs try to improve this.</p>

<h1 id="-hyperparamter-tuning">üìå Hyperparamter Tuning</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">GridSearchCV</span>
<span class="kn">import</span> <span class="n">time</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%%</span><span class="n">time</span>
<span class="c1"># set the parameters that we want to search 
</span><span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">max_depth</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">],</span>
    <span class="sh">'</span><span class="s">min_samples_leaf</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">200</span><span class="p">],</span>
    <span class="sh">'</span><span class="s">n_estimators</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">200</span><span class="p">]</span>
<span class="p">}</span>

<span class="n">grid_search</span> <span class="o">=</span> <span class="nc">GridSearchCV</span><span class="p">(</span><span class="n">estimator</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>
                           <span class="n">param_grid</span><span class="o">=</span><span class="n">params</span><span class="p">,</span>
                           <span class="n">cv</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span>
                           <span class="n">n_jobs</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">scoring</span><span class="o">=</span><span class="sh">"</span><span class="s">neg_mean_squared_error</span><span class="sh">"</span><span class="p">)</span>
<span class="n">grid_search</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">x_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fitting 4 folds for each of 180 candidates, totalling 720 fits
CPU times: user 21.4 s, sys: 4.71 s, total: 26.1 s
Wall time: 5min 33s
</code></pre></div></div>

<style>#sk-container-id-3 {
  /* Definition of color scheme common for light and dark mode */
  --sklearn-color-text: black;
  --sklearn-color-line: gray;
  /* Definition of color scheme for unfitted estimators */
  --sklearn-color-unfitted-level-0: #fff5e6;
  --sklearn-color-unfitted-level-1: #f6e4d2;
  --sklearn-color-unfitted-level-2: #ffe0b3;
  --sklearn-color-unfitted-level-3: chocolate;
  /* Definition of color scheme for fitted estimators */
  --sklearn-color-fitted-level-0: #f0f8ff;
  --sklearn-color-fitted-level-1: #d4ebff;
  --sklearn-color-fitted-level-2: #b3dbfd;
  --sklearn-color-fitted-level-3: cornflowerblue;

  /* Specific color for light theme */
  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-icon: #696969;

  @media (prefers-color-scheme: dark) {
    /* Redefinition of color scheme for dark theme */
    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-icon: #878787;
  }
}

#sk-container-id-3 {
  color: var(--sklearn-color-text);
}

#sk-container-id-3 pre {
  padding: 0;
}

#sk-container-id-3 input.sk-hidden--visually {
  border: 0;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

#sk-container-id-3 div.sk-dashed-wrapped {
  border: 1px dashed var(--sklearn-color-line);
  margin: 0 0.4em 0.5em 0.4em;
  box-sizing: border-box;
  padding-bottom: 0.4em;
  background-color: var(--sklearn-color-background);
}

#sk-container-id-3 div.sk-container {
  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
     but bootstrap.min.css set `[hidden] { display: none !important; }`
     so we also need the `!important` here to be able to override the
     default hidden behavior on the sphinx rendered scikit-learn.org.
     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
  display: inline-block !important;
  position: relative;
}

#sk-container-id-3 div.sk-text-repr-fallback {
  display: none;
}

div.sk-parallel-item,
div.sk-serial,
div.sk-item {
  /* draw centered vertical line to link estimators */
  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
  background-size: 2px 100%;
  background-repeat: no-repeat;
  background-position: center center;
}

/* Parallel-specific style estimator block */

#sk-container-id-3 div.sk-parallel-item::after {
  content: "";
  width: 100%;
  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
  flex-grow: 1;
}

#sk-container-id-3 div.sk-parallel {
  display: flex;
  align-items: stretch;
  justify-content: center;
  background-color: var(--sklearn-color-background);
  position: relative;
}

#sk-container-id-3 div.sk-parallel-item {
  display: flex;
  flex-direction: column;
}

#sk-container-id-3 div.sk-parallel-item:first-child::after {
  align-self: flex-end;
  width: 50%;
}

#sk-container-id-3 div.sk-parallel-item:last-child::after {
  align-self: flex-start;
  width: 50%;
}

#sk-container-id-3 div.sk-parallel-item:only-child::after {
  width: 0;
}

/* Serial-specific style estimator block */

#sk-container-id-3 div.sk-serial {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--sklearn-color-background);
  padding-right: 1em;
  padding-left: 1em;
}


/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
clickable and can be expanded/collapsed.
- Pipeline and ColumnTransformer use this feature and define the default style
- Estimators will overwrite some part of the style using the `sk-estimator` class
*/

/* Pipeline and ColumnTransformer style (default) */

#sk-container-id-3 div.sk-toggleable {
  /* Default theme specific background. It is overwritten whether we have a
  specific estimator or a Pipeline/ColumnTransformer */
  background-color: var(--sklearn-color-background);
}

/* Toggleable label */
#sk-container-id-3 label.sk-toggleable__label {
  cursor: pointer;
  display: block;
  width: 100%;
  margin-bottom: 0;
  padding: 0.5em;
  box-sizing: border-box;
  text-align: center;
}

#sk-container-id-3 label.sk-toggleable__label-arrow:before {
  /* Arrow on the left of the label */
  content: "‚ñ∏";
  float: left;
  margin-right: 0.25em;
  color: var(--sklearn-color-icon);
}

#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {
  color: var(--sklearn-color-text);
}

/* Toggleable content - dropdown */

#sk-container-id-3 div.sk-toggleable__content {
  max-height: 0;
  max-width: 0;
  overflow: hidden;
  text-align: left;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-3 div.sk-toggleable__content.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-3 div.sk-toggleable__content pre {
  margin: 0.2em;
  border-radius: 0.25em;
  color: var(--sklearn-color-text);
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-3 div.sk-toggleable__content.fitted pre {
  /* unfitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {
  /* Expand drop-down */
  max-height: 200px;
  max-width: 100%;
  overflow: auto;
}

#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
  content: "‚ñæ";
}

/* Pipeline/ColumnTransformer-specific style */

#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator-specific style */

/* Colorize estimator box */
#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

#sk-container-id-3 div.sk-label label.sk-toggleable__label,
#sk-container-id-3 div.sk-label label {
  /* The background is the default theme color */
  color: var(--sklearn-color-text-on-default-background);
}

/* On hover, darken the color of the background */
#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

/* Label box, darken color on hover, fitted */
#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator label */

#sk-container-id-3 div.sk-label label {
  font-family: monospace;
  font-weight: bold;
  display: inline-block;
  line-height: 1.2em;
}

#sk-container-id-3 div.sk-label-container {
  text-align: center;
}

/* Estimator-specific */
#sk-container-id-3 div.sk-estimator {
  font-family: monospace;
  border: 1px dotted var(--sklearn-color-border-box);
  border-radius: 0.25em;
  box-sizing: border-box;
  margin-bottom: 0.5em;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-3 div.sk-estimator.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

/* on hover */
#sk-container-id-3 div.sk-estimator:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-3 div.sk-estimator.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Specification for estimator info (e.g. "i" and "?") */

/* Common style for "i" and "?" */

.sk-estimator-doc-link,
a:link.sk-estimator-doc-link,
a:visited.sk-estimator-doc-link {
  float: right;
  font-size: smaller;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1em;
  height: 1em;
  width: 1em;
  text-decoration: none !important;
  margin-left: 1ex;
  /* unfitted */
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
  color: var(--sklearn-color-unfitted-level-1);
}

.sk-estimator-doc-link.fitted,
a:link.sk-estimator-doc-link.fitted,
a:visited.sk-estimator-doc-link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
div.sk-estimator:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover,
div.sk-label-container:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover,
div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

/* Span, style for the box shown on hovering the info icon */
.sk-estimator-doc-link span {
  display: none;
  z-index: 9999;
  position: relative;
  font-weight: normal;
  right: .2ex;
  padding: .5ex;
  margin: .5ex;
  width: min-content;
  min-width: 20ex;
  max-width: 50ex;
  color: var(--sklearn-color-text);
  box-shadow: 2pt 2pt 4pt #999;
  /* unfitted */
  background: var(--sklearn-color-unfitted-level-0);
  border: .5pt solid var(--sklearn-color-unfitted-level-3);
}

.sk-estimator-doc-link.fitted span {
  /* fitted */
  background: var(--sklearn-color-fitted-level-0);
  border: var(--sklearn-color-fitted-level-3);
}

.sk-estimator-doc-link:hover span {
  display: block;
}

/* "?"-specific style due to the `<a>` HTML tag */

#sk-container-id-3 a.estimator_doc_link {
  float: right;
  font-size: 1rem;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1rem;
  height: 1rem;
  width: 1rem;
  text-decoration: none;
  /* unfitted */
  color: var(--sklearn-color-unfitted-level-1);
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
}

#sk-container-id-3 a.estimator_doc_link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
#sk-container-id-3 a.estimator_doc_link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

#sk-container-id-3 a.estimator_doc_link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
}
</style>
<div id="sk-container-id-3" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>GridSearchCV(cv=4,
             estimator=RandomForestRegressor(n_estimators=50, random_state=42),
             n_jobs=-1,
             param_grid={&#x27;max_depth&#x27;: [2, 3, 5, 10, 20],
                         &#x27;min_samples_leaf&#x27;: [5, 10, 20, 50, 100, 200],
                         &#x27;n_estimators&#x27;: [10, 25, 30, 50, 100, 200]},
             scoring=&#x27;neg_mean_squared_error&#x27;, verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-3" type="checkbox" /><label for="sk-estimator-id-3" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;&nbsp;GridSearchCV<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.model_selection.GridSearchCV.html">?<span>Documentation for GridSearchCV</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label><div class="sk-toggleable__content fitted"><pre>GridSearchCV(cv=4,
             estimator=RandomForestRegressor(n_estimators=50, random_state=42),
             n_jobs=-1,
             param_grid={&#x27;max_depth&#x27;: [2, 3, 5, 10, 20],
                         &#x27;min_samples_leaf&#x27;: [5, 10, 20, 50, 100, 200],
                         &#x27;n_estimators&#x27;: [10, 25, 30, 50, 100, 200]},
             scoring=&#x27;neg_mean_squared_error&#x27;, verbose=1)</pre></div> </div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-4" type="checkbox" /><label for="sk-estimator-id-4" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">best_estimator_: RandomForestRegressor</label><div class="sk-toggleable__content fitted"><pre>RandomForestRegressor(max_depth=20, min_samples_leaf=20, n_estimators=200,
                      random_state=42)</pre></div> </div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-5" type="checkbox" /><label for="sk-estimator-id-5" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;RandomForestRegressor<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.ensemble.RandomForestRegressor.html">?<span>Documentation for RandomForestRegressor</span></a></label><div class="sk-toggleable__content fitted"><pre>RandomForestRegressor(max_depth=20, min_samples_leaf=20, n_estimators=200,
                      random_state=42)</pre></div> </div></div></div></div></div></div></div></div></div>

<!-- ```python

``` -->
<p>Now that we have a set of ideal hyperparameters, let‚Äôs retrain the model to see if we can get a better score.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># train random forest regressor model 
</span> <span class="n">model</span> <span class="o">=</span> <span class="nc">RandomForestRegressor</span><span class="p">(</span><span class="n">max_depth</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span><span class="n">min_samples_leaf</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">n_estimators</span><span class="o">=</span><span class="mi">200</span><span class="p">,</span>
                       <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
 <span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">x_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">)</span>
</code></pre></div></div>

<style>#sk-container-id-5 {
  /* Definition of color scheme common for light and dark mode */
  --sklearn-color-text: black;
  --sklearn-color-line: gray;
  /* Definition of color scheme for unfitted estimators */
  --sklearn-color-unfitted-level-0: #fff5e6;
  --sklearn-color-unfitted-level-1: #f6e4d2;
  --sklearn-color-unfitted-level-2: #ffe0b3;
  --sklearn-color-unfitted-level-3: chocolate;
  /* Definition of color scheme for fitted estimators */
  --sklearn-color-fitted-level-0: #f0f8ff;
  --sklearn-color-fitted-level-1: #d4ebff;
  --sklearn-color-fitted-level-2: #b3dbfd;
  --sklearn-color-fitted-level-3: cornflowerblue;

  /* Specific color for light theme */
  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-icon: #696969;

  @media (prefers-color-scheme: dark) {
    /* Redefinition of color scheme for dark theme */
    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-icon: #878787;
  }
}

#sk-container-id-5 {
  color: var(--sklearn-color-text);
}

#sk-container-id-5 pre {
  padding: 0;
}

#sk-container-id-5 input.sk-hidden--visually {
  border: 0;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

#sk-container-id-5 div.sk-dashed-wrapped {
  border: 1px dashed var(--sklearn-color-line);
  margin: 0 0.4em 0.5em 0.4em;
  box-sizing: border-box;
  padding-bottom: 0.4em;
  background-color: var(--sklearn-color-background);
}

#sk-container-id-5 div.sk-container {
  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
     but bootstrap.min.css set `[hidden] { display: none !important; }`
     so we also need the `!important` here to be able to override the
     default hidden behavior on the sphinx rendered scikit-learn.org.
     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
  display: inline-block !important;
  position: relative;
}

#sk-container-id-5 div.sk-text-repr-fallback {
  display: none;
}

div.sk-parallel-item,
div.sk-serial,
div.sk-item {
  /* draw centered vertical line to link estimators */
  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
  background-size: 2px 100%;
  background-repeat: no-repeat;
  background-position: center center;
}

/* Parallel-specific style estimator block */

#sk-container-id-5 div.sk-parallel-item::after {
  content: "";
  width: 100%;
  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
  flex-grow: 1;
}

#sk-container-id-5 div.sk-parallel {
  display: flex;
  align-items: stretch;
  justify-content: center;
  background-color: var(--sklearn-color-background);
  position: relative;
}

#sk-container-id-5 div.sk-parallel-item {
  display: flex;
  flex-direction: column;
}

#sk-container-id-5 div.sk-parallel-item:first-child::after {
  align-self: flex-end;
  width: 50%;
}

#sk-container-id-5 div.sk-parallel-item:last-child::after {
  align-self: flex-start;
  width: 50%;
}

#sk-container-id-5 div.sk-parallel-item:only-child::after {
  width: 0;
}

/* Serial-specific style estimator block */

#sk-container-id-5 div.sk-serial {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--sklearn-color-background);
  padding-right: 1em;
  padding-left: 1em;
}


/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
clickable and can be expanded/collapsed.
- Pipeline and ColumnTransformer use this feature and define the default style
- Estimators will overwrite some part of the style using the `sk-estimator` class
*/

/* Pipeline and ColumnTransformer style (default) */

#sk-container-id-5 div.sk-toggleable {
  /* Default theme specific background. It is overwritten whether we have a
  specific estimator or a Pipeline/ColumnTransformer */
  background-color: var(--sklearn-color-background);
}

/* Toggleable label */
#sk-container-id-5 label.sk-toggleable__label {
  cursor: pointer;
  display: block;
  width: 100%;
  margin-bottom: 0;
  padding: 0.5em;
  box-sizing: border-box;
  text-align: center;
}

#sk-container-id-5 label.sk-toggleable__label-arrow:before {
  /* Arrow on the left of the label */
  content: "‚ñ∏";
  float: left;
  margin-right: 0.25em;
  color: var(--sklearn-color-icon);
}

#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {
  color: var(--sklearn-color-text);
}

/* Toggleable content - dropdown */

#sk-container-id-5 div.sk-toggleable__content {
  max-height: 0;
  max-width: 0;
  overflow: hidden;
  text-align: left;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-5 div.sk-toggleable__content.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-5 div.sk-toggleable__content pre {
  margin: 0.2em;
  border-radius: 0.25em;
  color: var(--sklearn-color-text);
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-5 div.sk-toggleable__content.fitted pre {
  /* unfitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {
  /* Expand drop-down */
  max-height: 200px;
  max-width: 100%;
  overflow: auto;
}

#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
  content: "‚ñæ";
}

/* Pipeline/ColumnTransformer-specific style */

#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator-specific style */

/* Colorize estimator box */
#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

#sk-container-id-5 div.sk-label label.sk-toggleable__label,
#sk-container-id-5 div.sk-label label {
  /* The background is the default theme color */
  color: var(--sklearn-color-text-on-default-background);
}

/* On hover, darken the color of the background */
#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

/* Label box, darken color on hover, fitted */
#sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator label */

#sk-container-id-5 div.sk-label label {
  font-family: monospace;
  font-weight: bold;
  display: inline-block;
  line-height: 1.2em;
}

#sk-container-id-5 div.sk-label-container {
  text-align: center;
}

/* Estimator-specific */
#sk-container-id-5 div.sk-estimator {
  font-family: monospace;
  border: 1px dotted var(--sklearn-color-border-box);
  border-radius: 0.25em;
  box-sizing: border-box;
  margin-bottom: 0.5em;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-5 div.sk-estimator.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

/* on hover */
#sk-container-id-5 div.sk-estimator:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-5 div.sk-estimator.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Specification for estimator info (e.g. "i" and "?") */

/* Common style for "i" and "?" */

.sk-estimator-doc-link,
a:link.sk-estimator-doc-link,
a:visited.sk-estimator-doc-link {
  float: right;
  font-size: smaller;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1em;
  height: 1em;
  width: 1em;
  text-decoration: none !important;
  margin-left: 1ex;
  /* unfitted */
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
  color: var(--sklearn-color-unfitted-level-1);
}

.sk-estimator-doc-link.fitted,
a:link.sk-estimator-doc-link.fitted,
a:visited.sk-estimator-doc-link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
div.sk-estimator:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover,
div.sk-label-container:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover,
div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

/* Span, style for the box shown on hovering the info icon */
.sk-estimator-doc-link span {
  display: none;
  z-index: 9999;
  position: relative;
  font-weight: normal;
  right: .2ex;
  padding: .5ex;
  margin: .5ex;
  width: min-content;
  min-width: 20ex;
  max-width: 50ex;
  color: var(--sklearn-color-text);
  box-shadow: 2pt 2pt 4pt #999;
  /* unfitted */
  background: var(--sklearn-color-unfitted-level-0);
  border: .5pt solid var(--sklearn-color-unfitted-level-3);
}

.sk-estimator-doc-link.fitted span {
  /* fitted */
  background: var(--sklearn-color-fitted-level-0);
  border: var(--sklearn-color-fitted-level-3);
}

.sk-estimator-doc-link:hover span {
  display: block;
}

/* "?"-specific style due to the `<a>` HTML tag */

#sk-container-id-5 a.estimator_doc_link {
  float: right;
  font-size: 1rem;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1rem;
  height: 1rem;
  width: 1rem;
  text-decoration: none;
  /* unfitted */
  color: var(--sklearn-color-unfitted-level-1);
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
}

#sk-container-id-5 a.estimator_doc_link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
#sk-container-id-5 a.estimator_doc_link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

#sk-container-id-5 a.estimator_doc_link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
}
</style>
<div id="sk-container-id-5" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>RandomForestRegressor(max_depth=20,min_samples_leaf=20, n_estimators=200,random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-7" type="checkbox" checked="" /><label for="sk-estimator-id-7" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;&nbsp;RandomForestRegressor<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.ensemble.RandomForestRegressor.html">?<span>Documentation for RandomForestRegressor</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label><div class="sk-toggleable__content fitted"><pre>RandomForestRegressor(max_depth=20,min_samples_leaf=20, n_estimators=200,random_state=42)</pre></div> </div></div></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># evaluate model 
</span><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span> 

<span class="n">y_pred</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">x_test</span><span class="p">)</span>
<span class="n">rmse</span> <span class="o">=</span> <span class="nf">root_mean_squared_error</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span><span class="n">y_pred</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">RMSE:</span><span class="sh">'</span><span class="p">,</span> <span class="n">rmse</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RMSE: 0.9423977142884801
</code></pre></div></div>

<p>We can see that the model performs much better with the new <a href="##" title="hyperparameters control how the model is training">hyperparameters</a>!</p>]]></content><author><name></name></author><category term="Projects" /><summary type="html"><![CDATA[import pandas as pd from sklearn.preprocessing import LabelEncoder from sklearn.model_selection import train_test_split]]></summary></entry><entry><title type="html">Multinomial Naive Bayes for Text Classification</title><link href="http://localhost:4000/projects/2024/11/20/mnb_text_classifcation.html" rel="alternate" type="text/html" title="Multinomial Naive Bayes for Text Classification" /><published>2024-11-20T00:00:00-05:00</published><updated>2024-11-20T00:00:00-05:00</updated><id>http://localhost:4000/projects/2024/11/20/mnb_text_classifcation</id><content type="html" xml:base="http://localhost:4000/projects/2024/11/20/mnb_text_classifcation.html"><![CDATA[<p>In  this project I implement a Multinomial Naive Bayes model to classify text data. Multinomial Naive Bayes works well for the following reasons:</p>

<ul>
  <li>Handles high-dimensional data</li>
  <li>Robust to small datasets</li>
  <li>Fast training and prediction</li>
  <li>Works well for sparse data</li>
  <li>Is an interpretable model</li>
</ul>

<h3 id="import-statements">Import Statements</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">spacy</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span> 
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="n">sklearn.naive_bayes</span> <span class="kn">import</span> <span class="n">MultinomialNB</span>
<span class="kn">from</span> <span class="n">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">label_binarize</span>
<span class="kn">from</span> <span class="n">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
<span class="kn">from</span> <span class="n">sklearn.feature_extraction.text</span> <span class="kn">import</span> <span class="n">CountVectorizer</span>
<span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">confusion_matrix</span><span class="p">,</span> <span class="n">ConfusionMatrixDisplay</span>
<span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">accuracy_score</span><span class="p">,</span> <span class="n">confusion_matrix</span><span class="p">,</span><span class="n">roc_curve</span><span class="p">,</span> <span class="n">auc</span>
</code></pre></div></div>

<p>I use this <a href="http://mlg.ucd.ie/datasets/bbc.html"> dataset </a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># python -m spacy download en_core_web_sm
</span><span class="n">nlp</span> <span class="o">=</span> <span class="n">spacy</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="sh">"</span><span class="s">en_core_web_sm</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="note">Note:</h3>
<p>Arrays are homogeneous (all elements are of the same type) while lists are heterogeneous(elements can be diifferent)</p>

<p>Arrays have a fixed size, whereas lists are dynamic</p>

<p>Lists in python have more built in funtions</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># documents come in 5 folders, put them all together into one list 
</span><span class="n">files</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="nc">Path</span><span class="p">(</span><span class="sh">'</span><span class="s">bbc</span><span class="sh">'</span><span class="p">).</span><span class="nf">glob</span><span class="p">(</span><span class="sh">'</span><span class="s">**/*.txt</span><span class="sh">'</span><span class="p">)))</span>
<span class="n">doc_list</span> <span class="o">=</span> <span class="p">[]</span> 

<span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="nb">file</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">files</span><span class="p">):</span>
    <span class="c1"># get folder name
</span>    <span class="n">topic</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">parts</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
    <span class="n">article</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="nf">read_text</span><span class="p">(</span><span class="n">encoding</span><span class="o">=</span><span class="sh">'</span><span class="s">latin1</span><span class="sh">'</span><span class="p">).</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="se">\n</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">heading</span> <span class="o">=</span> <span class="n">article</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">strip</span><span class="p">()</span>
    <span class="n">body</span> <span class="o">=</span> <span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">l</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">article</span><span class="p">[</span><span class="mi">1</span><span class="p">:]])</span>
    <span class="n">doc_list</span><span class="p">.</span><span class="nf">append</span><span class="p">([</span><span class="n">topic</span><span class="p">,</span> <span class="n">heading</span><span class="p">,</span> <span class="n">body</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create dataframe 
</span><span class="n">docs</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">doc_list</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">topic</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">heading</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">body</span><span class="sh">'</span><span class="p">])</span>
<span class="n">docs</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 2225 entries, 0 to 2224
Data columns (total 3 columns):
 #   Column   Non-Null Count  Dtype 
---  ------   --------------  ----- 
 0   topic    2225 non-null   object
 1   heading  2225 non-null   object
 2   body     2225 non-null   object
dtypes: object(3)
memory usage: 52.3+ KB
</code></pre></div></div>

<p>Here is a look into the data:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">docs</span><span class="p">.</span><span class="nf">sample</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>topic</th>
      <th>heading</th>
      <th>body</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1123</th>
      <td>politics</td>
      <td>Labour pig poster 'anti-Semitic'</td>
      <td>The Labour Party has been accused of anti-Sem...</td>
    </tr>
    <tr>
      <th>325</th>
      <td>business</td>
      <td>Senior Fannie Mae bosses resign</td>
      <td>The two most senior executives at US mortgage...</td>
    </tr>
    <tr>
      <th>1500</th>
      <td>sport</td>
      <td>Campbell lifts lid on United feud</td>
      <td>Arsenal's Sol Campbell has called the rivalry...</td>
    </tr>
    <tr>
      <th>1454</th>
      <td>sport</td>
      <td>Owen determined to stay in Madrid</td>
      <td>England forward Michael Owen has told the BBC...</td>
    </tr>
    <tr>
      <th>1298</th>
      <td>politics</td>
      <td>Voters 'don't trust politicians'</td>
      <td>Eight out of 10 voters do not trust politicia...</td>
    </tr>
    <tr>
      <th>1633</th>
      <td>sport</td>
      <td>Woodward eyes Brennan for Lions</td>
      <td>Toulouse's former Irish international Trevor ...</td>
    </tr>
    <tr>
      <th>1006</th>
      <td>politics</td>
      <td>Kilroy launches 'Veritas' party</td>
      <td>Ex-BBC chat show host and East Midlands MEP R...</td>
    </tr>
    <tr>
      <th>1972</th>
      <td>tech</td>
      <td>Microsoft gets the blogging bug</td>
      <td>Software giant Microsoft is taking the plunge...</td>
    </tr>
    <tr>
      <th>302</th>
      <td>business</td>
      <td>Brazil plays down Varig rescue</td>
      <td>The Brazilian government has played down clai...</td>
    </tr>
    <tr>
      <th>454</th>
      <td>business</td>
      <td>Qantas considers offshore option</td>
      <td>Australian airline Qantas could transfer as m...</td>
    </tr>
  </tbody>
</table>
</div>

<p>We are going to classify articles based on these five categories:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">docs</span><span class="p">.</span><span class="n">topic</span><span class="p">.</span><span class="nf">value_counts</span><span class="p">(</span><span class="n">normalize</span><span class="o">=</span><span class="bp">True</span><span class="p">).</span><span class="nf">to_frame</span><span class="p">(</span><span class="sh">'</span><span class="s">count</span><span class="sh">'</span><span class="p">).</span><span class="n">style</span><span class="p">.</span><span class="nf">format</span><span class="p">({</span><span class="sh">'</span><span class="s">count</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">{:,.2%}</span><span class="sh">'</span><span class="p">.</span><span class="nb">format</span><span class="p">})</span>
</code></pre></div></div>

<style type="text/css">
</style>

<table id="T_479be">
  <thead>
    <tr>
      <th class="blank level0">&nbsp;</th>
      <th id="T_479be_level0_col0" class="col_heading level0 col0">count</th>
    </tr>
    <tr>
      <th class="index_name level0">topic</th>
      <th class="blank col0">&nbsp;</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th id="T_479be_level0_row0" class="row_heading level0 row0">sport</th>
      <td id="T_479be_row0_col0" class="data row0 col0">22.97%</td>
    </tr>
    <tr>
      <th id="T_479be_level0_row1" class="row_heading level0 row1">business</th>
      <td id="T_479be_row1_col0" class="data row1 col0">22.92%</td>
    </tr>
    <tr>
      <th id="T_479be_level0_row2" class="row_heading level0 row2">politics</th>
      <td id="T_479be_row2_col0" class="data row2 col0">18.74%</td>
    </tr>
    <tr>
      <th id="T_479be_level0_row3" class="row_heading level0 row3">tech</th>
      <td id="T_479be_row3_col0" class="data row3 col0">18.02%</td>
    </tr>
    <tr>
      <th id="T_479be_level0_row4" class="row_heading level0 row4">entertainment</th>
      <td id="T_479be_row4_col0" class="data row4 col0">17.35%</td>
    </tr>
  </tbody>
</table>

<p>The parameter  <code class="language-plaintext highlighter-rouge">stratify = y</code> ensures that when the data is split into training and testing sets, the proportion of classes is preserved.</p>

<p>Without <code class="language-plaintext highlighter-rouge">stratify = y</code> there may be an unbalanced distributiion of classes between training and testing sets, especially if some classes are less frequent in the original dataset.</p>

<p>With <code class="language-plaintext highlighter-rouge">stratify = y</code> the splot respected the distribution of the different classes in the dataset.</p>

<p>For example, if topic 1 represents 20% of the original dataset, it will also represent approximately 20% of both the training and testing sets.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># classify news articles
</span>
<span class="c1"># create integer class values
</span><span class="n">y</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">factorize</span><span class="p">(</span><span class="n">docs</span><span class="p">.</span><span class="n">topic</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">docs</span><span class="p">.</span><span class="n">body</span> 
<span class="n">x_train</span><span class="p">,</span> <span class="n">x_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="nf">train_test_split</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">random_state</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">stratify</span><span class="o">=</span><span class="n">y</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="vectorize-text-data">Vectorize Text Data</h3>

<p><code class="language-plaintext highlighter-rouge">CountVectorizer()</code> converts a collection of text documents into a matrix of token/word counts. First the data is tokenized by being split into individual words. Then, a vocabulary of unique tokens across the entire corpus is built. Finally, a word count matrix is created where each row corresponds to a document and each column corresponds to the count of a unique word in the vocabulary.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vectorizer</span> <span class="o">=</span> <span class="nc">CountVectorizer</span><span class="p">(</span><span class="n">stop_words</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
<span class="n">x_train_dtm</span> <span class="o">=</span> <span class="n">vectorizer</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">x_train</span><span class="p">)</span>
<span class="n">x_test_dtm</span> <span class="o">=</span> <span class="n">vectorizer</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="n">x_test</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x_train_dtm</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">x_test_dtm</span><span class="p">.</span><span class="n">shape</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>((1668, 25951), (557, 25951))
</code></pre></div></div>

<h3 id="train-multi-class-naive-bayes-model">Train Multi-Class Naive Bayes Model</h3>

<p>Naive Bayes is based on Bayes Theorem:</p>

<p>First equation is here \({P(C|X) = \frac{P(X‚à£C)P(C)}{P(X)}}\)</p>

<p>where C is the class and X is the feature.</p>

<p>Some limitations are its <strong>feature independence assumption</strong> and its <strong>zero frequency problem</strong>. There is a strong assumption that features are condiditionally independent which does not always hold, depending on the data. Also, if a class has a zero probability for a given feature, the entire product becomes zero.</p>

<p>Multinomial naive bayes handles frequency based features, making it effective for text classification when the number of times a word appears in an article is meaningful.</p>

<p>My one concern while building this was that stop words would be frequent enough across all documents to influence the classification of topics. However, stop words are generally not topic-specific and do not provide much discriiminatory power between the classes. For example, the word ‚Äúthe‚Äù can appear in articles about both sports and politics.</p>

<p>Naive Bayes is robust in this nature‚Äì it naturall down weights stop words because of its probablistic nature. Stop words, being common across all classes, will have siimilar probabilities for all classes <em>((P(word|class))</em>. Thus, these words have limited impact on the overall classification decision</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nb</span> <span class="o">=</span> <span class="nc">MultinomialNB</span><span class="p">()</span>
<span class="n">nb</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">x_train_dtm</span><span class="p">,</span><span class="n">y_train</span><span class="p">)</span>
<span class="n">y_pred_class</span> <span class="o">=</span> <span class="n">nb</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">x_test_dtm</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">score</span> <span class="o">=</span> <span class="nf">accuracy_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_pred_class</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">score</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0.9712746858168761
</code></pre></div></div>

<p>Our model produces an accuracy score of 97% ‚Äì pretty good!</p>

<h3 id="create-and-plot-confusion-matrix">Create and plot confusion matrix</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># calculate the confusion matrix
</span><span class="n">cm</span> <span class="o">=</span> <span class="nf">confusion_matrix</span><span class="p">(</span><span class="n">y_true</span><span class="o">=</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_pred</span><span class="o">=</span><span class="n">y_pred_class</span><span class="p">)</span>

<span class="c1"># display the confusion matrix as a heatmap
</span><span class="n">disp</span> <span class="o">=</span> <span class="nc">ConfusionMatrixDisplay</span><span class="p">(</span><span class="n">confusion_matrix</span><span class="o">=</span><span class="n">cm</span><span class="p">,</span> <span class="n">display_labels</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nf">unique</span><span class="p">(</span><span class="n">y_test</span><span class="p">))</span>
<span class="n">disp</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">Blues</span><span class="sh">'</span><span class="p">,</span> <span class="n">xticks_rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">)</span>

<span class="c1"># customize plot
</span><span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">Confusion Matrix</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Predicted Labels</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">14</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">True Labels</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">14</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>

</code></pre></div></div>

<p><img src="http://localhost:4000/assets/images/mnb_text_classifcation_files/mnb_text_classifcation_22_0.png" alt="image" /></p>

<h3 id="create-roc-plot-for-all-classes">Create ROC plot for all classes</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">y_pred_probs</span> <span class="o">=</span> <span class="n">nb</span><span class="p">.</span><span class="nf">predict_proba</span><span class="p">(</span><span class="n">x_test_dtm</span><span class="p">)</span>
<span class="c1"># create binary labels for class 0
</span><span class="n">y_test_binary</span> <span class="o">=</span> <span class="p">(</span><span class="n">y_test</span> <span class="o">==</span> <span class="mi">0</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>   
<span class="c1"># probabilities for class 0
</span><span class="n">y_pred_probs_class0</span> <span class="o">=</span> <span class="n">y_pred_probs</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">]</span>     
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># get the unique class labels
</span><span class="n">classes</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">unique</span><span class="p">(</span><span class="n">y_test</span><span class="p">)</span>  
<span class="n">n_classes</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">classes</span><span class="p">)</span>

<span class="c1"># binarize the output for multi-class ROC
</span><span class="n">y_test_binarized</span> <span class="o">=</span> <span class="nf">label_binarize</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">classes</span><span class="o">=</span><span class="n">classes</span><span class="p">)</span>

<span class="c1"># initialize plot
</span><span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
<span class="n">colors</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="nf">get_cmap</span><span class="p">(</span><span class="sh">'</span><span class="s">tab10</span><span class="sh">'</span><span class="p">,</span> <span class="n">n_classes</span><span class="p">)</span>

<span class="c1"># plot ROC for each class
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n_classes</span><span class="p">):</span>
    <span class="n">fpr</span><span class="p">,</span> <span class="n">tpr</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="nf">roc_curve</span><span class="p">(</span><span class="n">y_test_binarized</span><span class="p">[:,</span> <span class="n">i</span><span class="p">],</span> <span class="n">y_pred_probs</span><span class="p">[:,</span> <span class="n">i</span><span class="p">])</span>
    <span class="n">roc_auc</span> <span class="o">=</span> <span class="nf">auc</span><span class="p">(</span><span class="n">fpr</span><span class="p">,</span> <span class="n">tpr</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">fpr</span><span class="p">,</span> <span class="n">tpr</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">Class </span><span class="si">{</span><span class="n">classes</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="si">}</span><span class="s"> (AUC = </span><span class="si">{</span><span class="n">roc_auc</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="nf">colors</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>

<span class="c1"># ddd diagonal reference line
</span><span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="sh">'</span><span class="s">k--</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Random Guessing</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># plot settings
</span><span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">One-vs-Rest ROC Curves</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">False Positive Rate</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">14</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">True Positive Rate</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">14</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="sh">"</span><span class="s">lower right</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="http://localhost:4000/assets/images/mnb_text_classifcation_files/mnb_text_classifcation_25_1.png" alt="image" /></p>

<p>ROC curves look good!</p>]]></content><author><name></name></author><category term="Projects" /><summary type="html"><![CDATA[In this project I implement a Multinomial Naive Bayes model to classify text data. Multinomial Naive Bayes works well for the following reasons:]]></summary></entry><entry><title type="html">Random Forests - A Long-Short Strategy for Stocks üå≤</title><link href="http://localhost:4000/projects/2024/11/13/random_forest_classifier.html" rel="alternate" type="text/html" title="Random Forests - A Long-Short Strategy for Stocks üå≤" /><published>2024-11-13T00:00:00-05:00</published><updated>2024-11-13T00:00:00-05:00</updated><id>http://localhost:4000/projects/2024/11/13/random_forest_classifier</id><content type="html" xml:base="http://localhost:4000/projects/2024/11/13/random_forest_classifier.html"><![CDATA[<p>In this project we will use a random forest classifier to generate profitable trading signals for the Nikkei 225.</p>

<h3 id="import-statements">Import Statements</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">graphviz</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span> 
<span class="kn">import</span> <span class="n">yfinance</span> <span class="k">as</span> <span class="n">yf</span> 
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="n">sklearn.tree</span> <span class="kn">import</span> <span class="n">export_graphviz</span>
<span class="kn">from</span> <span class="n">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">GridSearchCV</span>
<span class="kn">from</span> <span class="n">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
<span class="kn">from</span> <span class="n">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">RandomForestClassifier</span>
<span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">classification_report</span><span class="p">,</span> <span class="n">confusion_matrix</span><span class="p">,</span><span class="n">accuracy_score</span><span class="p">,</span><span class="n">roc_curve</span><span class="p">,</span> <span class="n">roc_auc_score</span>

</code></pre></div></div>

<h3 id="download-data">Download Data</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ticker</span> <span class="o">=</span> <span class="n">yf</span><span class="p">.</span><span class="nc">Ticker</span><span class="p">(</span><span class="sh">'</span><span class="s">^N225</span><span class="sh">'</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">ticker</span><span class="p">.</span><span class="nf">history</span><span class="p">(</span><span class="n">period</span> <span class="o">=</span> <span class="sh">'</span><span class="s">2y</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">display</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">head</span><span class="p">())</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Open</th>
      <th>High</th>
      <th>Low</th>
      <th>Close</th>
      <th>Volume</th>
      <th>Dividends</th>
      <th>Stock Splits</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2022-11-14 00:00:00+09:00</th>
      <td>28277.640625</td>
      <td>28305.039062</td>
      <td>27963.470703</td>
      <td>27963.470703</td>
      <td>85100000</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2022-11-15 00:00:00+09:00</th>
      <td>27940.259766</td>
      <td>28038.630859</td>
      <td>27903.269531</td>
      <td>27990.169922</td>
      <td>71200000</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2022-11-16 00:00:00+09:00</th>
      <td>28020.490234</td>
      <td>28069.250000</td>
      <td>27743.150391</td>
      <td>28028.300781</td>
      <td>73200000</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2022-11-17 00:00:00+09:00</th>
      <td>27952.210938</td>
      <td>28029.619141</td>
      <td>27910.009766</td>
      <td>27930.570312</td>
      <td>58900000</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2022-11-18 00:00:00+09:00</th>
      <td>28009.820312</td>
      <td>28045.439453</td>
      <td>27877.779297</td>
      <td>27899.769531</td>
      <td>64800000</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
</div>

<h3 id="clean-data">Clean Data</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># drop rows with missing values 
</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">dropna</span><span class="p">()</span>
<span class="c1"># check for and drop duplicate dates 
</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="o">~</span><span class="n">data</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="nf">duplicated</span><span class="p">(</span><span class="n">keep</span><span class="o">=</span><span class="sh">'</span><span class="s">first</span><span class="sh">'</span><span class="p">)]</span>
</code></pre></div></div>

<p>The features that we use will be Moving Average Convergence Divergence (MACD), Signal Line, Relative Strength Index (RSI), the Simple Moving Average - 20 days, Simple Moving Average - 50 days Exponential Moving Average- 20 days, and Exponential Moving Average- 50 days. The code below shows how to create these features.</p>

<h3 id="feature-engineering">Feature Engineering</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># window lengths for feature calculation 
</span><span class="n">short_window</span> <span class="o">=</span> <span class="mi">20</span>  <span class="c1"># short term ma window 
</span><span class="n">long_window</span> <span class="o">=</span> <span class="mi">50</span>   <span class="c1"># long term ma window 
</span><span class="n">vol_window</span> <span class="o">=</span> <span class="mi">20</span>    <span class="c1"># volatility window 
</span>
<span class="c1"># simple moving averages (SMA)
</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">sma_20</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">Close</span><span class="sh">'</span><span class="p">].</span><span class="nf">rolling</span><span class="p">(</span><span class="n">window</span><span class="o">=</span><span class="n">short_window</span><span class="p">).</span><span class="nf">mean</span><span class="p">()</span>
<span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">sma_50</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">Close</span><span class="sh">'</span><span class="p">].</span><span class="nf">rolling</span><span class="p">(</span><span class="n">window</span><span class="o">=</span><span class="n">long_window</span><span class="p">).</span><span class="nf">mean</span><span class="p">()</span>

<span class="c1"># exponential moving average (EMA)
</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">ema_20</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">Close</span><span class="sh">'</span><span class="p">].</span><span class="nf">ewm</span><span class="p">(</span><span class="n">span</span><span class="o">=</span><span class="n">short_window</span><span class="p">,</span><span class="n">adjust</span><span class="o">=</span><span class="bp">False</span><span class="p">).</span><span class="nf">mean</span><span class="p">()</span>
<span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">ema_50</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">Close</span><span class="sh">'</span><span class="p">].</span><span class="nf">ewm</span><span class="p">(</span><span class="n">span</span><span class="o">=</span><span class="n">short_window</span><span class="p">,</span><span class="n">adjust</span><span class="o">=</span><span class="bp">False</span><span class="p">).</span><span class="nf">mean</span><span class="p">()</span>
</code></pre></div></div>
<p>The RSI measures the speed and magnitude of a security‚Äôs recent price changes iin order to detect overvalued or undervalued conditions in the price of that security. Typically an RSI &gt; 70 indicates an overbought condition and an RSI &lt; 30 inidicates an oversold condition.</p>

<p><mark style="background-color: lightblue">overbought = trading at a higher price than it's worth and is likely to decline</mark> <br />
<mark style="background-color: lightblue">oversold = tradinig at a lower price than it's worth and is likely to rally </mark></p>

<p><em>delta = data[‚ÄòClose‚Äô].diff(1)</em> calculates the day-over-day change in the closing price. For example, if a stock price goes from 100 to 102, the delta for that dat would be 2. This produces a series of price changes for each day.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#relative strength index (RSI)
</span><span class="n">delta</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">Close</span><span class="sh">'</span><span class="p">].</span><span class="nf">diff</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> 
<span class="n">gain</span> <span class="o">=</span> <span class="n">delta</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="n">delta</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
<span class="n">loss</span> <span class="o">=</span> <span class="o">-</span><span class="n">delta</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="n">delta</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>

<span class="n">avg_gain</span> <span class="o">=</span> <span class="n">gain</span><span class="p">.</span><span class="nf">rolling</span><span class="p">(</span><span class="n">window</span><span class="o">=</span><span class="mi">14</span><span class="p">).</span><span class="nf">mean</span><span class="p">()</span>
<span class="n">avg_loss</span> <span class="o">=</span> <span class="n">loss</span><span class="p">.</span><span class="nf">rolling</span><span class="p">(</span><span class="n">window</span><span class="o">=</span><span class="mi">14</span><span class="p">).</span><span class="nf">mean</span><span class="p">()</span>
</code></pre></div></div>
<p>Relative Strength (RS) is the ration of the average gain to the average loss. If gains are greater than losses over the period RS will be greater than 1, indicating an upward trend.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rs</span> <span class="o">=</span> <span class="n">avg_gain</span><span class="o">/</span><span class="n">avg_loss</span>

<span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">rsi</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">100</span> <span class="o">-</span> <span class="p">(</span><span class="mi">100</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span><span class="n">rs</span><span class="p">))</span>

<span class="c1"># volatility (rolling standard deviation of returns)
</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">volatility</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">Close</span><span class="sh">'</span><span class="p">].</span><span class="nf">pct_change</span><span class="p">().</span><span class="nf">rolling</span><span class="p">(</span><span class="n">window</span><span class="o">=</span><span class="n">vol_window</span><span class="p">).</span><span class="nf">std</span><span class="p">()</span>
 
<span class="c1"># momentum (price difference over the period)
</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">momentum</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">Close</span><span class="sh">'</span><span class="p">]</span> <span class="o">-</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">Close</span><span class="sh">'</span><span class="p">].</span><span class="nf">shift</span><span class="p">(</span><span class="n">short_window</span><span class="p">)</span>
</code></pre></div></div>
<p>The MACD is a line that fluctates above and below 0 that indicates when the moving averages are converging, crossing, or diverging.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># moving average convergence divergence (macd)
</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">ema_12</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">Close</span><span class="sh">'</span><span class="p">].</span><span class="nf">ewm</span><span class="p">(</span><span class="n">span</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">adjust</span><span class="o">=</span><span class="bp">False</span><span class="p">).</span><span class="nf">mean</span><span class="p">()</span>
<span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">ema_26</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">Close</span><span class="sh">'</span><span class="p">].</span><span class="nf">ewm</span><span class="p">(</span><span class="n">span</span><span class="o">=</span><span class="mi">26</span><span class="p">,</span> <span class="n">adjust</span><span class="o">=</span><span class="bp">False</span><span class="p">).</span><span class="nf">mean</span><span class="p">()</span>
<span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">macd</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">ema_12</span><span class="sh">'</span><span class="p">]</span> <span class="o">-</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">ema_26</span><span class="sh">'</span><span class="p">]</span>
<span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">signal_line</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">macd</span><span class="sh">'</span><span class="p">].</span><span class="nf">ewm</span><span class="p">(</span><span class="n">span</span><span class="o">=</span><span class="mi">9</span><span class="p">,</span> <span class="n">adjust</span><span class="o">=</span><span class="bp">False</span><span class="p">).</span><span class="nf">mean</span><span class="p">()</span>
<span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">macd_histogram</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">macd</span><span class="sh">'</span><span class="p">]</span> <span class="o">-</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">signal_line</span><span class="sh">'</span><span class="p">]</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">dropna</span><span class="p">()</span>
<span class="nf">display</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">tail</span><span class="p">())</span>

</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Open</th>
      <th>High</th>
      <th>Low</th>
      <th>Close</th>
      <th>Volume</th>
      <th>Dividends</th>
      <th>Stock Splits</th>
      <th>sma_20</th>
      <th>sma_50</th>
      <th>ema_20</th>
      <th>ema_50</th>
      <th>rsi</th>
      <th>volatility</th>
      <th>momentum</th>
      <th>ema_12</th>
      <th>ema_26</th>
      <th>macd</th>
      <th>signal_line</th>
      <th>macd_histogram</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2024-11-07 00:00:00+09:00</th>
      <td>39745.230469</td>
      <td>39884.011719</td>
      <td>39020.218750</td>
      <td>39381.410156</td>
      <td>190000000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>38901.779102</td>
      <td>38211.528594</td>
      <td>38756.994064</td>
      <td>38756.994064</td>
      <td>54.412138</td>
      <td>0.012271</td>
      <td>443.871094</td>
      <td>38860.938570</td>
      <td>38675.031304</td>
      <td>185.907266</td>
      <td>169.430036</td>
      <td>16.477230</td>
    </tr>
    <tr>
      <th>2024-11-08 00:00:00+09:00</th>
      <td>39783.449219</td>
      <td>39818.410156</td>
      <td>39377.871094</td>
      <td>39500.371094</td>
      <td>159300000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>38912.899609</td>
      <td>38239.331641</td>
      <td>38827.791877</td>
      <td>38827.791877</td>
      <td>54.822500</td>
      <td>0.012138</td>
      <td>222.410156</td>
      <td>38959.312804</td>
      <td>38736.167585</td>
      <td>223.145220</td>
      <td>180.173073</td>
      <td>42.972147</td>
    </tr>
    <tr>
      <th>2024-11-11 00:00:00+09:00</th>
      <td>39417.210938</td>
      <td>39598.738281</td>
      <td>39315.609375</td>
      <td>39533.320312</td>
      <td>122700000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>38920.521094</td>
      <td>38264.225625</td>
      <td>38894.985061</td>
      <td>38894.985061</td>
      <td>55.375531</td>
      <td>0.012127</td>
      <td>152.429688</td>
      <td>39047.621652</td>
      <td>38795.215935</td>
      <td>252.405717</td>
      <td>194.619602</td>
      <td>57.786115</td>
    </tr>
    <tr>
      <th>2024-11-12 00:00:00+09:00</th>
      <td>39642.781250</td>
      <td>39866.718750</td>
      <td>39137.890625</td>
      <td>39376.089844</td>
      <td>163000000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>38909.035547</td>
      <td>38284.312187</td>
      <td>38940.804564</td>
      <td>38940.804564</td>
      <td>59.646135</td>
      <td>0.012092</td>
      <td>-229.710938</td>
      <td>39098.155220</td>
      <td>38838.243632</td>
      <td>259.911588</td>
      <td>207.677999</td>
      <td>52.233589</td>
    </tr>
    <tr>
      <th>2024-11-13 00:00:00+09:00</th>
      <td>39317.148438</td>
      <td>39377.238281</td>
      <td>38600.261719</td>
      <td>38721.660156</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>38849.591016</td>
      <td>38291.494766</td>
      <td>38919.933668</td>
      <td>38919.933668</td>
      <td>55.770084</td>
      <td>0.012470</td>
      <td>-1188.890625</td>
      <td>39040.232902</td>
      <td>38829.607819</td>
      <td>210.625083</td>
      <td>208.267416</td>
      <td>2.357668</td>
    </tr>
  </tbody>
</table>
</div>

<h3 id="plot-macd">Plot MACD</h3>

<p>The MACD histogram shows the difference between the MACD line and the signal line, highlighting momentum shifts and potential trend reversals. The momemntum shifts occur at points where the two lines crossover.</p>

<p><mark style="background-color: lightblue">MACD line above signal = potential buying momentum and entering long position</mark> <br />
<mark style="background-color: lightblue">MACD line below signal = potential selling momentum and entering short position </mark></p>

<p>Long position means that you are buying stocks with the intention of profitting from its rising value <br />
Short position means that you are betting on making money from the stocks falling in value.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Set up the figure and axes for subplots
</span><span class="n">fig</span><span class="p">,</span> <span class="p">(</span><span class="n">ax1</span><span class="p">,</span> <span class="n">ax2</span><span class="p">)</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span> <span class="n">sharex</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="c1"># Plot the Closing Price
</span><span class="n">ax1</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">Close</span><span class="sh">'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Close Price</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">blue</span><span class="sh">'</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.7</span><span class="p">)</span>
<span class="n">ax1</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Stock Price and MACD Indicator</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax1</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Price</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax1</span><span class="p">.</span><span class="nf">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="sh">"</span><span class="s">upper left</span><span class="sh">"</span><span class="p">)</span>
<span class="c1"># Plot the MACD and Signal Line
</span><span class="n">ax2</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">macd</span><span class="sh">'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">MACD</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">purple</span><span class="sh">'</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mf">1.5</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">signal_line</span><span class="sh">'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Signal Line</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">orange</span><span class="sh">'</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mf">1.5</span><span class="p">)</span>
<span class="c1"># Plot the MACD Histogram as a bar plot
</span><span class="n">ax2</span><span class="p">.</span><span class="nf">bar</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">macd_histogram</span><span class="sh">'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">MACD Histogram</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">grey</span><span class="sh">'</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.3</span><span class="p">)</span>
<span class="c1"># Set labels and title for the MACD plot
</span><span class="n">ax2</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">MACD</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="nf">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="sh">"</span><span class="s">upper left</span><span class="sh">"</span><span class="p">)</span>
<span class="c1"># Display the plot
</span><span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="http://localhost:4000/assets/images/random_forest_classifier_files/random_forest_classifier_9_0.png" alt="image" /></p>

<h3 id="define-long---short-signals">Define Long - Short Signals</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">position</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">nan</span>
<span class="c1"># define long position(1) when macd crosses above signal line 
</span><span class="n">data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">macd</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">signal_line</span><span class="sh">'</span><span class="p">],</span> <span class="sh">'</span><span class="s">position</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span> 
<span class="c1"># define short position(-1) when macd crosses below signal line 
</span><span class="n">data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">macd</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">signal_line</span><span class="sh">'</span><span class="p">],</span> <span class="sh">'</span><span class="s">position</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> 
</code></pre></div></div>
<p>Use <em>ffill()</em> to carry forward the last signal until a new signal is generated. This means the position will be held until there is a crossover on the signal line</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">position</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">position</span><span class="sh">'</span><span class="p">].</span><span class="nf">ffill</span><span class="p">()</span>
<span class="nf">display</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">tail</span><span class="p">())</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Open</th>
      <th>High</th>
      <th>Low</th>
      <th>Close</th>
      <th>Volume</th>
      <th>Dividends</th>
      <th>Stock Splits</th>
      <th>sma_20</th>
      <th>sma_50</th>
      <th>ema_20</th>
      <th>ema_50</th>
      <th>rsi</th>
      <th>volatility</th>
      <th>momentum</th>
      <th>ema_12</th>
      <th>ema_26</th>
      <th>macd</th>
      <th>signal_line</th>
      <th>macd_histogram</th>
      <th>position</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2024-11-07 00:00:00+09:00</th>
      <td>39745.230469</td>
      <td>39884.011719</td>
      <td>39020.218750</td>
      <td>39381.410156</td>
      <td>190000000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>38901.779102</td>
      <td>38211.528594</td>
      <td>38756.994064</td>
      <td>38756.994064</td>
      <td>54.412138</td>
      <td>0.012271</td>
      <td>443.871094</td>
      <td>38860.938570</td>
      <td>38675.031304</td>
      <td>185.907266</td>
      <td>169.430036</td>
      <td>16.477230</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2024-11-08 00:00:00+09:00</th>
      <td>39783.449219</td>
      <td>39818.410156</td>
      <td>39377.871094</td>
      <td>39500.371094</td>
      <td>159300000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>38912.899609</td>
      <td>38239.331641</td>
      <td>38827.791877</td>
      <td>38827.791877</td>
      <td>54.822500</td>
      <td>0.012138</td>
      <td>222.410156</td>
      <td>38959.312804</td>
      <td>38736.167585</td>
      <td>223.145220</td>
      <td>180.173073</td>
      <td>42.972147</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2024-11-11 00:00:00+09:00</th>
      <td>39417.210938</td>
      <td>39598.738281</td>
      <td>39315.609375</td>
      <td>39533.320312</td>
      <td>122700000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>38920.521094</td>
      <td>38264.225625</td>
      <td>38894.985061</td>
      <td>38894.985061</td>
      <td>55.375531</td>
      <td>0.012127</td>
      <td>152.429688</td>
      <td>39047.621652</td>
      <td>38795.215935</td>
      <td>252.405717</td>
      <td>194.619602</td>
      <td>57.786115</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2024-11-12 00:00:00+09:00</th>
      <td>39642.781250</td>
      <td>39866.718750</td>
      <td>39137.890625</td>
      <td>39376.089844</td>
      <td>163000000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>38909.035547</td>
      <td>38284.312187</td>
      <td>38940.804564</td>
      <td>38940.804564</td>
      <td>59.646135</td>
      <td>0.012092</td>
      <td>-229.710938</td>
      <td>39098.155220</td>
      <td>38838.243632</td>
      <td>259.911588</td>
      <td>207.677999</td>
      <td>52.233589</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2024-11-13 00:00:00+09:00</th>
      <td>39317.148438</td>
      <td>39377.238281</td>
      <td>38600.261719</td>
      <td>38721.660156</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>38849.591016</td>
      <td>38291.494766</td>
      <td>38919.933668</td>
      <td>38919.933668</td>
      <td>55.770084</td>
      <td>0.012470</td>
      <td>-1188.890625</td>
      <td>39040.232902</td>
      <td>38829.607819</td>
      <td>210.625083</td>
      <td>208.267416</td>
      <td>2.357668</td>
      <td>1.0</td>
    </tr>
  </tbody>
</table>
</div>

<p>Some notes on random forest classifiers:</p>

<p>Bagging or Bootstrap Aggregating uses replacement. This means that after selecting a smaple from the dataset to put into the training subset, you put it back into the dataset and it can be chosen again for the same subset or a different subset. Each subset can contain duplicate samples and some samples from the original dataset may not even be included in a subset for training.</p>

<p>Pasting is the opposite, i.e. without replacement. Each sample in the subset us unique. Every subset of data used for training is therefore completely unique. Pasting works better with larger datasets.</p>

<h3 id="build-and-train-random-forest-classifier">Build and Train Random Forest Classifier</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># define features and target
</span><span class="n">features</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">macd</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">signal_line</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">rsi</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">sma_20</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">ema_20</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">ema_50</span><span class="sh">'</span><span class="p">]</span>
<span class="n">target</span> <span class="o">=</span> <span class="sh">'</span><span class="s">position</span><span class="sh">'</span>

<span class="c1"># prep features and target var 
</span><span class="n">x</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">features</span><span class="p">]</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">target</span><span class="p">]</span>

<span class="c1"># drop rows with missiing values 
</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="nf">dropna</span><span class="p">()</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="p">[</span><span class="n">x</span><span class="p">.</span><span class="n">index</span><span class="p">]</span> <span class="c1"># make sure target var matches the features 
</span>
<span class="c1"># split the data 
</span><span class="n">x_train</span><span class="p">,</span> <span class="n">x_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span><span class="n">y_test</span> <span class="o">=</span> <span class="nf">train_test_split</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span><span class="n">shuffle</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="c1"># print(len(x_train),len(x_test))
</span>
<span class="c1"># initialize random forest classifier 
</span><span class="n">rf_model</span> <span class="o">=</span> <span class="nc">RandomForestClassifier</span><span class="p">(</span><span class="n">max_depth</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">min_samples_leaf</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">n_estimators</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span><span class="n">oob_score</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="c1"># train the model 
</span><span class="n">rf_model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">x_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">)</span>

<span class="c1"># make predictions on the test set 
</span><span class="n">y_pred</span> <span class="o">=</span> <span class="n">rf_model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">x_test</span><span class="p">)</span>
<span class="c1"># evaluate the model 
</span><span class="n">accuracy</span> <span class="o">=</span> <span class="nf">accuracy_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span><span class="n">y_pred</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">accuracy: </span><span class="sh">'</span><span class="p">,</span><span class="n">accuracy</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">classification report: </span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">classification_report</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span><span class="n">y_pred</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">confusion matrix: </span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">confusion_matrix</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span><span class="n">y_pred</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>accuracy:  0.9438202247191011
classification report: 
              precision    recall  f1-score   support

        -1.0       0.96      0.87      0.92        31
         1.0       0.93      0.98      0.96        58

    accuracy                           0.94        89
   macro avg       0.95      0.93      0.94        89
weighted avg       0.94      0.94      0.94        89

confusion matrix: 
[[27  4]
 [ 1 57]]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># check oob score, becuase random forest classfiier immediately creates this as a validation set 
</span><span class="nf">print</span><span class="p">(</span><span class="n">rf_model</span><span class="p">.</span><span class="n">oob_score_</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0.884180790960452
</code></pre></div></div>

<p>Random Forest using oob (out of bag) sampling inherently instead of requiring a validation set to be created.</p>

<h3 id="plot-roc-and-calculate-auc">Plot ROC and Calculate AUC</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># predict probabilities for the positive class 
</span><span class="n">y_probs</span> <span class="o">=</span> <span class="n">rf_model</span><span class="p">.</span><span class="nf">predict_proba</span><span class="p">(</span><span class="n">x_test</span><span class="p">)[:,</span><span class="mi">1</span><span class="p">]</span>
<span class="c1"># calculate roc curve 
</span><span class="n">fpr</span><span class="p">,</span> <span class="n">tpr</span><span class="p">,</span> <span class="n">thresholds</span> <span class="o">=</span> <span class="nf">roc_curve</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_probs</span><span class="p">)</span>
<span class="c1"># calculate auc 
</span><span class="n">roc_auc</span> <span class="o">=</span> <span class="nf">roc_auc_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_probs</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">fpr</span><span class="p">,</span> <span class="n">tpr</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">blue</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sa">f</span><span class="sh">'</span><span class="s">ROC curve (AUC = </span><span class="si">{</span><span class="n">roc_auc</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">)</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">grey</span><span class="sh">'</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># Diagonal line for random performance
</span><span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">False Positive Rate</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">True Positive Rate</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Receiver Operating Characteristic (ROC) Curve</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="sh">'</span><span class="s">lower right</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="http://localhost:4000/assets/images/random_forest_classifier_files/random_forest_classifier_18_0.png" alt="image" /></p>

<h3 id="hyperparameter-tuning">Hyperparameter Tuning</h3>
<p>Using default hyperparmeters, I achieved an accuracy score of about 83% which isn‚Äôt bad, but can be better. Hyperparameter tuning will search a series of parameters to figure out which ones are the best.</p>

<p>The results show that the best parameters are:
 max_depth=10 <br />
 min_samples_leaf=5 <br />
 n_estimators=25</p>

<p>I went back and replaced the default hyperparameters with the above, but found that when n_estimators = 100, the reuslts were better.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># set the parameters that we want to search 
</span><span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">max_depth</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">],</span>
    <span class="sh">'</span><span class="s">min_samples_leaf</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">200</span><span class="p">],</span>
    <span class="sh">'</span><span class="s">n_estimators</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">200</span><span class="p">]</span>
<span class="p">}</span>

<span class="n">grid_search</span> <span class="o">=</span> <span class="nc">GridSearchCV</span><span class="p">(</span><span class="n">estimator</span><span class="o">=</span><span class="n">rf_model</span><span class="p">,</span>
                           <span class="n">param_grid</span><span class="o">=</span><span class="n">params</span><span class="p">,</span>
                           <span class="n">cv</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span>
                           <span class="n">n_jobs</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">scoring</span><span class="o">=</span><span class="sh">"</span><span class="s">accuracy</span><span class="sh">"</span><span class="p">)</span>
<span class="n">grid_search</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">x_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fitting 4 folds for each of 180 candidates, totalling 720 fits
CPU times: user 2.18 s, sys: 331 ms, total: 2.51 s
Wall time: 29.9 s
</code></pre></div></div>

<style>#sk-container-id-2 {
  /* Definition of color scheme common for light and dark mode */
  --sklearn-color-text: black;
  --sklearn-color-line: gray;
  /* Definition of color scheme for unfitted estimators */
  --sklearn-color-unfitted-level-0: #fff5e6;
  --sklearn-color-unfitted-level-1: #f6e4d2;
  --sklearn-color-unfitted-level-2: #ffe0b3;
  --sklearn-color-unfitted-level-3: chocolate;
  /* Definition of color scheme for fitted estimators */
  --sklearn-color-fitted-level-0: #f0f8ff;
  --sklearn-color-fitted-level-1: #d4ebff;
  --sklearn-color-fitted-level-2: #b3dbfd;
  --sklearn-color-fitted-level-3: cornflowerblue;

  /* Specific color for light theme */
  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-icon: #696969;

  @media (prefers-color-scheme: dark) {
    /* Redefinition of color scheme for dark theme */
    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-icon: #878787;
  }
}

#sk-container-id-2 {
  color: var(--sklearn-color-text);
}

#sk-container-id-2 pre {
  padding: 0;
}

#sk-container-id-2 input.sk-hidden--visually {
  border: 0;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

#sk-container-id-2 div.sk-dashed-wrapped {
  border: 1px dashed var(--sklearn-color-line);
  margin: 0 0.4em 0.5em 0.4em;
  box-sizing: border-box;
  padding-bottom: 0.4em;
  background-color: var(--sklearn-color-background);
}

#sk-container-id-2 div.sk-container {
  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
     but bootstrap.min.css set `[hidden] { display: none !important; }`
     so we also need the `!important` here to be able to override the
     default hidden behavior on the sphinx rendered scikit-learn.org.
     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
  display: inline-block !important;
  position: relative;
}

#sk-container-id-2 div.sk-text-repr-fallback {
  display: none;
}

div.sk-parallel-item,
div.sk-serial,
div.sk-item {
  /* draw centered vertical line to link estimators */
  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
  background-size: 2px 100%;
  background-repeat: no-repeat;
  background-position: center center;
}

/* Parallel-specific style estimator block */

#sk-container-id-2 div.sk-parallel-item::after {
  content: "";
  width: 100%;
  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
  flex-grow: 1;
}

#sk-container-id-2 div.sk-parallel {
  display: flex;
  align-items: stretch;
  justify-content: center;
  background-color: var(--sklearn-color-background);
  position: relative;
}

#sk-container-id-2 div.sk-parallel-item {
  display: flex;
  flex-direction: column;
}

#sk-container-id-2 div.sk-parallel-item:first-child::after {
  align-self: flex-end;
  width: 50%;
}

#sk-container-id-2 div.sk-parallel-item:last-child::after {
  align-self: flex-start;
  width: 50%;
}

#sk-container-id-2 div.sk-parallel-item:only-child::after {
  width: 0;
}

/* Serial-specific style estimator block */

#sk-container-id-2 div.sk-serial {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--sklearn-color-background);
  padding-right: 1em;
  padding-left: 1em;
}


/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
clickable and can be expanded/collapsed.
- Pipeline and ColumnTransformer use this feature and define the default style
- Estimators will overwrite some part of the style using the `sk-estimator` class
*/

/* Pipeline and ColumnTransformer style (default) */

#sk-container-id-2 div.sk-toggleable {
  /* Default theme specific background. It is overwritten whether we have a
  specific estimator or a Pipeline/ColumnTransformer */
  background-color: var(--sklearn-color-background);
}

/* Toggleable label */
#sk-container-id-2 label.sk-toggleable__label {
  cursor: pointer;
  display: block;
  width: 100%;
  margin-bottom: 0;
  padding: 0.5em;
  box-sizing: border-box;
  text-align: center;
}

#sk-container-id-2 label.sk-toggleable__label-arrow:before {
  /* Arrow on the left of the label */
  content: "‚ñ∏";
  float: left;
  margin-right: 0.25em;
  color: var(--sklearn-color-icon);
}

#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {
  color: var(--sklearn-color-text);
}

/* Toggleable content - dropdown */

#sk-container-id-2 div.sk-toggleable__content {
  max-height: 0;
  max-width: 0;
  overflow: hidden;
  text-align: left;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-2 div.sk-toggleable__content.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-2 div.sk-toggleable__content pre {
  margin: 0.2em;
  border-radius: 0.25em;
  color: var(--sklearn-color-text);
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-2 div.sk-toggleable__content.fitted pre {
  /* unfitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {
  /* Expand drop-down */
  max-height: 200px;
  max-width: 100%;
  overflow: auto;
}

#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
  content: "‚ñæ";
}

/* Pipeline/ColumnTransformer-specific style */

#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator-specific style */

/* Colorize estimator box */
#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

#sk-container-id-2 div.sk-label label.sk-toggleable__label,
#sk-container-id-2 div.sk-label label {
  /* The background is the default theme color */
  color: var(--sklearn-color-text-on-default-background);
}

/* On hover, darken the color of the background */
#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

/* Label box, darken color on hover, fitted */
#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator label */

#sk-container-id-2 div.sk-label label {
  font-family: monospace;
  font-weight: bold;
  display: inline-block;
  line-height: 1.2em;
}

#sk-container-id-2 div.sk-label-container {
  text-align: center;
}

/* Estimator-specific */
#sk-container-id-2 div.sk-estimator {
  font-family: monospace;
  border: 1px dotted var(--sklearn-color-border-box);
  border-radius: 0.25em;
  box-sizing: border-box;
  margin-bottom: 0.5em;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-2 div.sk-estimator.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

/* on hover */
#sk-container-id-2 div.sk-estimator:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-2 div.sk-estimator.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Specification for estimator info (e.g. "i" and "?") */

/* Common style for "i" and "?" */

.sk-estimator-doc-link,
a:link.sk-estimator-doc-link,
a:visited.sk-estimator-doc-link {
  float: right;
  font-size: smaller;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1em;
  height: 1em;
  width: 1em;
  text-decoration: none !important;
  margin-left: 1ex;
  /* unfitted */
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
  color: var(--sklearn-color-unfitted-level-1);
}

.sk-estimator-doc-link.fitted,
a:link.sk-estimator-doc-link.fitted,
a:visited.sk-estimator-doc-link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
div.sk-estimator:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover,
div.sk-label-container:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover,
div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

/* Span, style for the box shown on hovering the info icon */
.sk-estimator-doc-link span {
  display: none;
  z-index: 9999;
  position: relative;
  font-weight: normal;
  right: .2ex;
  padding: .5ex;
  margin: .5ex;
  width: min-content;
  min-width: 20ex;
  max-width: 50ex;
  color: var(--sklearn-color-text);
  box-shadow: 2pt 2pt 4pt #999;
  /* unfitted */
  background: var(--sklearn-color-unfitted-level-0);
  border: .5pt solid var(--sklearn-color-unfitted-level-3);
}

.sk-estimator-doc-link.fitted span {
  /* fitted */
  background: var(--sklearn-color-fitted-level-0);
  border: var(--sklearn-color-fitted-level-3);
}

.sk-estimator-doc-link:hover span {
  display: block;
}

/* "?"-specific style due to the `<a>` HTML tag */

#sk-container-id-2 a.estimator_doc_link {
  float: right;
  font-size: 1rem;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1rem;
  height: 1rem;
  width: 1rem;
  text-decoration: none;
  /* unfitted */
  color: var(--sklearn-color-unfitted-level-1);
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
}

#sk-container-id-2 a.estimator_doc_link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
#sk-container-id-2 a.estimator_doc_link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

#sk-container-id-2 a.estimator_doc_link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
}
</style>
<div id="sk-container-id-2" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>GridSearchCV(cv=4,
             estimator=RandomForestClassifier(max_depth=10, min_samples_leaf=5,
                                              oob_score=True, random_state=42),
             n_jobs=-1,
             param_grid={&#x27;max_depth&#x27;: [2, 3, 5, 10, 20],
                         &#x27;min_samples_leaf&#x27;: [5, 10, 20, 50, 100, 200],
                         &#x27;n_estimators&#x27;: [10, 25, 30, 50, 100, 200]},
             scoring=&#x27;accuracy&#x27;, verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-4" type="checkbox" /><label for="sk-estimator-id-4" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;&nbsp;GridSearchCV<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.model_selection.GridSearchCV.html">?<span>Documentation for GridSearchCV</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label><div class="sk-toggleable__content fitted"><pre>GridSearchCV(cv=4,
             estimator=RandomForestClassifier(max_depth=10, min_samples_leaf=5,
                                              oob_score=True, random_state=42),
             n_jobs=-1,
             param_grid={&#x27;max_depth&#x27;: [2, 3, 5, 10, 20],
                         &#x27;min_samples_leaf&#x27;: [5, 10, 20, 50, 100, 200],
                         &#x27;n_estimators&#x27;: [10, 25, 30, 50, 100, 200]},
             scoring=&#x27;accuracy&#x27;, verbose=1)</pre></div> </div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-5" type="checkbox" /><label for="sk-estimator-id-5" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">best_estimator_: RandomForestClassifier</label><div class="sk-toggleable__content fitted"><pre>RandomForestClassifier(max_depth=10, min_samples_leaf=5, n_estimators=25,
                       oob_score=True, random_state=42)</pre></div> </div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-6" type="checkbox" /><label for="sk-estimator-id-6" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;RandomForestClassifier<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.ensemble.RandomForestClassifier.html">?<span>Documentation for RandomForestClassifier</span></a></label><div class="sk-toggleable__content fitted"><pre>RandomForestClassifier(max_depth=10, min_samples_leaf=5, n_estimators=25,
                       oob_score=True, random_state=42)</pre></div> </div></div></div></div></div></div></div></div></div>

<h3 id="plot-feature-importance">Plot Feature Importance</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature_importance</span> <span class="o">=</span> <span class="n">rf_model</span><span class="p">.</span><span class="n">feature_importances_</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">barh</span><span class="p">(</span><span class="n">features</span><span class="p">,</span> <span class="n">feature_importance</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Feature Importance</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Random Forest Feature Importance</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>

<span class="c1"># visualize one of the classifiers 
</span><span class="n">dot_data</span> <span class="o">=</span> <span class="nf">export_graphviz</span><span class="p">(</span><span class="n">rf_model</span><span class="p">.</span><span class="n">estimators_</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> 
                             <span class="n">out_file</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> 
                             <span class="n">feature_names</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">columns</span><span class="p">,</span> 
                             <span class="n">class_names</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">-1</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">1</span><span class="sh">'</span><span class="p">],</span>
                             <span class="n">filled</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                             <span class="n">rounded</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                             <span class="n">special_characters</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="n">graph</span> <span class="o">=</span> <span class="n">graphviz</span><span class="p">.</span><span class="nc">Source</span><span class="p">(</span><span class="n">dot_data</span><span class="p">)</span>
<span class="n">graph</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span><span class="sh">"</span><span class="s">decision tree</span><span class="sh">"</span><span class="p">,</span><span class="nb">format</span><span class="o">=</span><span class="sh">'</span><span class="s">png</span><span class="sh">'</span><span class="p">,</span><span class="n">cleanup</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">graph</span><span class="p">.</span><span class="nf">view</span><span class="p">()</span>
</code></pre></div></div>
<p><img src="http://localhost:4000/assets/images/random_forest_classifier_files/random_forest_classifier_23_0.png" alt="image" /></p>

<p>So we can see that the relative strength index is the most important feature in the dataset.</p>

<p><img src="http://localhost:4000/assets/images/random_forest_classifier_files/decision tree.png" alt="image" /></p>

<h3 id="generate-predictions">Generate Predictions</h3>
<p>Finally, we can generate predictions on the entire data set and compare the predicted positions with the actual positions.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">predicted_position</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">rf_model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="n">final</span> <span class="o">=</span> <span class="n">data</span><span class="p">[[</span><span class="sh">'</span><span class="s">position</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">predicted_position</span><span class="sh">'</span><span class="p">]]</span>
<span class="nf">display</span><span class="p">(</span><span class="n">final</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>position</th>
      <th>predicted_position</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2023-01-26 00:00:00+09:00</th>
      <td>1.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2023-01-27 00:00:00+09:00</th>
      <td>1.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2023-01-30 00:00:00+09:00</th>
      <td>1.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2023-01-31 00:00:00+09:00</th>
      <td>1.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2023-02-01 00:00:00+09:00</th>
      <td>1.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>2024-11-07 00:00:00+09:00</th>
      <td>1.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2024-11-08 00:00:00+09:00</th>
      <td>1.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2024-11-11 00:00:00+09:00</th>
      <td>1.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2024-11-12 00:00:00+09:00</th>
      <td>1.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2024-11-13 00:00:00+09:00</th>
      <td>1.0</td>
      <td>1.0</td>
    </tr>
  </tbody>
</table>
<p>443 rows √ó 2 columns</p>
</div>

<p>We can also see where the actual, calculated decision does not match the predicted position.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">display</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">position</span><span class="sh">'</span><span class="p">]</span> <span class="o">!=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">predicted_position</span><span class="sh">'</span><span class="p">]])</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Open</th>
      <th>High</th>
      <th>Low</th>
      <th>Close</th>
      <th>Volume</th>
      <th>Dividends</th>
      <th>Stock Splits</th>
      <th>sma_20</th>
      <th>sma_50</th>
      <th>ema_20</th>
      <th>...</th>
      <th>rsi</th>
      <th>volatility</th>
      <th>momentum</th>
      <th>ema_12</th>
      <th>ema_26</th>
      <th>macd</th>
      <th>signal_line</th>
      <th>macd_histogram</th>
      <th>position</th>
      <th>predicted_position</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2023-02-17 00:00:00+09:00</th>
      <td>27484.599609</td>
      <td>27608.589844</td>
      <td>27466.609375</td>
      <td>27513.130859</td>
      <td>68800000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>27467.344141</td>
      <td>27015.462773</td>
      <td>27385.025950</td>
      <td>...</td>
      <td>52.544581</td>
      <td>0.005926</td>
      <td>959.601562</td>
      <td>27507.998171</td>
      <td>27317.894436</td>
      <td>190.103735</td>
      <td>194.787100</td>
      <td>-4.683365</td>
      <td>-1.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2023-02-20 00:00:00+09:00</th>
      <td>27497.130859</td>
      <td>27531.939453</td>
      <td>27426.480469</td>
      <td>27531.939453</td>
      <td>62500000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>27498.639160</td>
      <td>27012.373555</td>
      <td>27399.017712</td>
      <td>...</td>
      <td>56.923727</td>
      <td>0.005276</td>
      <td>625.900391</td>
      <td>27511.681445</td>
      <td>27333.749623</td>
      <td>177.931823</td>
      <td>191.416045</td>
      <td>-13.484222</td>
      <td>-1.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2023-03-30 00:00:00+09:00</th>
      <td>27827.890625</td>
      <td>27876.380859</td>
      <td>27630.550781</td>
      <td>27782.929688</td>
      <td>82000000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>27684.621777</td>
      <td>27494.761758</td>
      <td>27570.491005</td>
      <td>...</td>
      <td>38.133818</td>
      <td>0.011013</td>
      <td>266.400391</td>
      <td>27576.015957</td>
      <td>27556.687718</td>
      <td>19.328239</td>
      <td>6.294103</td>
      <td>13.034136</td>
      <td>1.0</td>
      <td>-1.0</td>
    </tr>
    <tr>
      <th>2023-04-10 00:00:00+09:00</th>
      <td>27658.519531</td>
      <td>27737.490234</td>
      <td>27597.179688</td>
      <td>27633.660156</td>
      <td>48000000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>27573.137891</td>
      <td>27619.602656</td>
      <td>27687.528395</td>
      <td>...</td>
      <td>62.826132</td>
      <td>0.010656</td>
      <td>-510.310547</td>
      <td>27711.332896</td>
      <td>27663.756052</td>
      <td>47.576844</td>
      <td>63.484004</td>
      <td>-15.907160</td>
      <td>-1.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2023-04-11 00:00:00+09:00</th>
      <td>27895.900391</td>
      <td>28068.390625</td>
      <td>27854.820312</td>
      <td>27923.369141</td>
      <td>64800000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>27577.658301</td>
      <td>27630.418828</td>
      <td>27709.989418</td>
      <td>...</td>
      <td>59.318753</td>
      <td>0.010660</td>
      <td>90.408203</td>
      <td>27743.953857</td>
      <td>27682.986651</td>
      <td>60.967206</td>
      <td>62.980644</td>
      <td>-2.013439</td>
      <td>-1.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2023-09-21 00:00:00+09:00</th>
      <td>32865.558594</td>
      <td>32939.890625</td>
      <td>32550.650391</td>
      <td>32571.029297</td>
      <td>107900000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>32713.799609</td>
      <td>32494.285820</td>
      <td>32757.701448</td>
      <td>...</td>
      <td>49.321868</td>
      <td>0.010014</td>
      <td>560.769531</td>
      <td>32873.815310</td>
      <td>32694.564731</td>
      <td>179.250579</td>
      <td>169.147336</td>
      <td>10.103243</td>
      <td>1.0</td>
      <td>-1.0</td>
    </tr>
    <tr>
      <th>2023-10-16 00:00:00+09:00</th>
      <td>31983.039062</td>
      <td>31999.789062</td>
      <td>31564.310547</td>
      <td>31659.029297</td>
      <td>84500000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>32080.802930</td>
      <td>32235.168242</td>
      <td>31981.839379</td>
      <td>...</td>
      <td>40.252909</td>
      <td>0.013162</td>
      <td>-1509.072266</td>
      <td>31870.004290</td>
      <td>32053.219943</td>
      <td>-183.215653</td>
      <td>-221.515003</td>
      <td>38.299350</td>
      <td>1.0</td>
      <td>-1.0</td>
    </tr>
    <tr>
      <th>2023-10-25 00:00:00+09:00</th>
      <td>31302.509766</td>
      <td>31466.919922</td>
      <td>31195.580078</td>
      <td>31269.919922</td>
      <td>78700000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>31597.691309</td>
      <td>32122.819609</td>
      <td>31678.628901</td>
      <td>...</td>
      <td>57.970678</td>
      <td>0.013278</td>
      <td>-1045.130859</td>
      <td>31506.207344</td>
      <td>31778.585800</td>
      <td>-272.378456</td>
      <td>-225.425469</td>
      <td>-46.952987</td>
      <td>-1.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2023-11-01 00:00:00+09:00</th>
      <td>31311.220703</td>
      <td>31601.650391</td>
      <td>31301.509766</td>
      <td>31601.650391</td>
      <td>130100000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>31380.244824</td>
      <td>32044.875977</td>
      <td>31406.949473</td>
      <td>...</td>
      <td>40.677205</td>
      <td>0.014841</td>
      <td>363.710938</td>
      <td>31228.198012</td>
      <td>31523.362572</td>
      <td>-295.164560</td>
      <td>-295.774575</td>
      <td>0.610016</td>
      <td>1.0</td>
      <td>-1.0</td>
    </tr>
    <tr>
      <th>2023-12-04 00:00:00+09:00</th>
      <td>33318.070312</td>
      <td>33324.378906</td>
      <td>33023.039062</td>
      <td>33231.269531</td>
      <td>87300000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>33115.909180</td>
      <td>32218.798789</td>
      <td>33032.855349</td>
      <td>...</td>
      <td>63.357467</td>
      <td>0.009593</td>
      <td>1281.378906</td>
      <td>33265.644680</td>
      <td>32885.774493</td>
      <td>379.870187</td>
      <td>404.636944</td>
      <td>-24.766757</td>
      <td>-1.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2023-12-26 00:00:00+09:00</th>
      <td>33295.679688</td>
      <td>33312.261719</td>
      <td>33181.359375</td>
      <td>33305.851562</td>
      <td>68300000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>33080.057227</td>
      <td>32578.252500</td>
      <td>33076.413488</td>
      <td>...</td>
      <td>48.296399</td>
      <td>0.011044</td>
      <td>-102.539062</td>
      <td>33145.258185</td>
      <td>33015.601761</td>
      <td>129.656424</td>
      <td>125.346315</td>
      <td>4.310109</td>
      <td>1.0</td>
      <td>-1.0</td>
    </tr>
    <tr>
      <th>2024-01-30 00:00:00+09:00</th>
      <td>36196.640625</td>
      <td>36249.031250</td>
      <td>36039.308594</td>
      <td>36065.859375</td>
      <td>87900000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>35215.043555</td>
      <td>34015.763125</td>
      <td>35337.236029</td>
      <td>...</td>
      <td>69.772308</td>
      <td>0.009780</td>
      <td>2384.621094</td>
      <td>35774.784950</td>
      <td>35050.490528</td>
      <td>724.294422</td>
      <td>730.132578</td>
      <td>-5.838156</td>
      <td>-1.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2024-03-08 00:00:00+09:00</th>
      <td>39809.558594</td>
      <td>39989.328125</td>
      <td>39551.601562</td>
      <td>39688.941406</td>
      <td>143300000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>38830.578320</td>
      <td>36628.270859</td>
      <td>38809.261927</td>
      <td>...</td>
      <td>71.310158</td>
      <td>0.010562</td>
      <td>3569.019531</td>
      <td>39377.822010</td>
      <td>38399.300401</td>
      <td>978.521609</td>
      <td>1009.610745</td>
      <td>-31.089136</td>
      <td>-1.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2024-03-25 00:00:00+09:00</th>
      <td>40798.960938</td>
      <td>40837.179688</td>
      <td>40414.121094</td>
      <td>40414.121094</td>
      <td>101500000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>39601.740430</td>
      <td>37836.404219</td>
      <td>39429.966488</td>
      <td>...</td>
      <td>53.418080</td>
      <td>0.011011</td>
      <td>1315.441406</td>
      <td>39827.164290</td>
      <td>39119.040156</td>
      <td>708.124134</td>
      <td>686.521700</td>
      <td>21.602435</td>
      <td>1.0</td>
      <td>-1.0</td>
    </tr>
    <tr>
      <th>2024-03-26 00:00:00+09:00</th>
      <td>40345.039062</td>
      <td>40529.531250</td>
      <td>40280.851562</td>
      <td>40398.031250</td>
      <td>101400000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>39659.956445</td>
      <td>37943.367656</td>
      <td>39522.163132</td>
      <td>...</td>
      <td>53.364377</td>
      <td>0.011013</td>
      <td>1164.320312</td>
      <td>39914.989976</td>
      <td>39213.780237</td>
      <td>701.209739</td>
      <td>689.459308</td>
      <td>11.750432</td>
      <td>1.0</td>
      <td>-1.0</td>
    </tr>
    <tr>
      <th>2024-03-27 00:00:00+09:00</th>
      <td>40517.171875</td>
      <td>40979.359375</td>
      <td>40452.210938</td>
      <td>40762.730469</td>
      <td>121300000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>39736.116992</td>
      <td>38047.080078</td>
      <td>39640.312402</td>
      <td>...</td>
      <td>56.967091</td>
      <td>0.011133</td>
      <td>1523.210938</td>
      <td>40045.411590</td>
      <td>39328.517291</td>
      <td>716.894299</td>
      <td>694.946306</td>
      <td>21.947993</td>
      <td>1.0</td>
      <td>-1.0</td>
    </tr>
    <tr>
      <th>2024-05-30 00:00:00+09:00</th>
      <td>38112.769531</td>
      <td>38138.031250</td>
      <td>37617.000000</td>
      <td>38054.128906</td>
      <td>117300000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>38561.450195</td>
      <td>38971.007187</td>
      <td>38604.989942</td>
      <td>...</td>
      <td>47.636190</td>
      <td>0.008827</td>
      <td>-351.531250</td>
      <td>38606.600319</td>
      <td>38616.011877</td>
      <td>-9.411558</td>
      <td>1.325213</td>
      <td>-10.736770</td>
      <td>-1.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2024-05-31 00:00:00+09:00</th>
      <td>38173.218750</td>
      <td>38526.929688</td>
      <td>38087.609375</td>
      <td>38487.898438</td>
      <td>211000000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>38572.142578</td>
      <td>38945.956328</td>
      <td>38593.838370</td>
      <td>...</td>
      <td>53.774913</td>
      <td>0.009177</td>
      <td>213.847656</td>
      <td>38588.338491</td>
      <td>38606.521993</td>
      <td>-18.183501</td>
      <td>-2.576530</td>
      <td>-15.606971</td>
      <td>-1.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2024-10-18 00:00:00+09:00</th>
      <td>39092.468750</td>
      <td>39186.640625</td>
      <td>38893.519531</td>
      <td>38981.750000</td>
      <td>95700000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>38726.598047</td>
      <td>37697.068047</td>
      <td>38707.127747</td>
      <td>...</td>
      <td>44.308282</td>
      <td>0.018217</td>
      <td>2601.578125</td>
      <td>38996.177299</td>
      <td>38542.783793</td>
      <td>453.393506</td>
      <td>444.418413</td>
      <td>8.975093</td>
      <td>1.0</td>
      <td>-1.0</td>
    </tr>
    <tr>
      <th>2024-11-06 00:00:00+09:00</th>
      <td>38677.949219</td>
      <td>39664.531250</td>
      <td>38662.171875</td>
      <td>39480.671875</td>
      <td>170600000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>38879.585547</td>
      <td>38191.185781</td>
      <td>38691.266054</td>
      <td>...</td>
      <td>52.731370</td>
      <td>0.012487</td>
      <td>147.933594</td>
      <td>38766.307372</td>
      <td>38618.520996</td>
      <td>147.786377</td>
      <td>165.310729</td>
      <td>-17.524352</td>
      <td>-1.0</td>
      <td>1.0</td>
    </tr>
  </tbody>
</table>
<p>20 rows √ó 21 columns</p>
</div>]]></content><author><name></name></author><category term="Projects" /><summary type="html"><![CDATA[In this project we will use a random forest classifier to generate profitable trading signals for the Nikkei 225.]]></summary></entry><entry><title type="html">Stock Prediction and Anomaly Detection üìà</title><link href="http://localhost:4000/projects/2024/11/07/stock_prediction.html" rel="alternate" type="text/html" title="Stock Prediction and Anomaly Detection üìà" /><published>2024-11-07T00:00:00-05:00</published><updated>2024-11-07T00:00:00-05:00</updated><id>http://localhost:4000/projects/2024/11/07/stock_prediction</id><content type="html" xml:base="http://localhost:4000/projects/2024/11/07/stock_prediction.html"><![CDATA[<p>The goal of this project is to get familiar with financial data, review basic time series forecasting and anomaly detection. 
The project‚Äôs main objectives‚Äî  prediction stock price trends and identifying unusual price movements‚Äî  are easy to understand and measure. I will also create a simple liquidity score based on trading volume and price volatility, which will give me insight into how liquidity affects price stability.</p>

<p>We need the following imports:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">yfinance</span> <span class="k">as</span> <span class="n">yf</span> 
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span> 
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span> 
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span> 
</code></pre></div></div>

<p>The first section is data collection and preparation. I use the Yahoo finance API to gather daily stock price and volume data for MSFT (microsoft) over a two year period.</p>

<h1 id="part-1-data-collection-and-preparation">Part 1. Data Collection and Preparation</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># fetch historical data 
</span><span class="n">ticker</span> <span class="o">=</span> <span class="n">yf</span><span class="p">.</span><span class="nc">Ticker</span><span class="p">(</span><span class="sh">"</span><span class="s">MSFT</span><span class="sh">"</span><span class="p">)</span>
<span class="c1"># print(ticker.info)
</span><span class="n">data</span> <span class="o">=</span> <span class="n">ticker</span><span class="p">.</span><span class="nf">history</span><span class="p">(</span><span class="n">period</span> <span class="o">=</span> <span class="sh">"</span><span class="s">2y</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>
<p>Here is an example of what the data looks like:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
                                 <span class="n">Open</span>        <span class="n">High</span>         <span class="n">Low</span>       <span class="n">Close</span>    <span class="n">Volume</span>  <span class="n">Dividends</span>  <span class="n">Stock</span> <span class="n">Splits</span>
<span class="n">Date</span>                                                                                                        
<span class="mi">2022</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">08</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">-</span><span class="mi">05</span><span class="p">:</span><span class="mi">00</span>  <span class="mf">224.824170</span>  <span class="mf">227.724173</span>  <span class="mf">222.012638</span>  <span class="mf">224.991287</span>  <span class="mi">28192500</span>        <span class="mf">0.0</span>           <span class="mf">0.0</span>
<span class="mi">2022</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">09</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">-</span><span class="mi">05</span><span class="p">:</span><span class="mi">00</span>  <span class="mf">223.516686</span>  <span class="mf">224.755342</span>  <span class="mf">220.528212</span>  <span class="mf">220.705154</span>  <span class="mi">27852900</span>        <span class="mf">0.0</span>           <span class="mf">0.0</span>
<span class="mi">2022</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">10</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">-</span><span class="mi">05</span><span class="p">:</span><span class="mi">00</span>  <span class="mf">231.440116</span>  <span class="mf">239.206242</span>  <span class="mf">231.017410</span>  <span class="mf">238.862167</span>  <span class="mi">46268000</span>        <span class="mf">0.0</span>           <span class="mf">0.0</span>
<span class="mi">2022</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">11</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">-</span><span class="mi">05</span><span class="p">:</span><span class="mi">00</span>  <span class="mf">238.872022</span>  <span class="mf">243.787287</span>  <span class="mf">237.829974</span>  <span class="mf">242.922195</span>  <span class="mi">34620200</span>        <span class="mf">0.0</span>           <span class="mf">0.0</span>
<span class="mi">2022</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">14</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">-</span><span class="mi">05</span><span class="p">:</span><span class="mi">00</span>  <span class="mf">237.888951</span>  <span class="mf">239.776411</span>  <span class="mf">235.156066</span>  <span class="mf">237.456406</span>  <span class="mi">31123300</span>        <span class="mf">0.0</span>           <span class="mf">0.0</span>
</code></pre></div></div>

<p>The next step is to do some exploratory data analysis where I will plot the stock prices, calculate the moving averages, and calculate price volatility.</p>

<p>Moving averages are used to analyze data points over a certain time period in order to smooth out short term fluctuations and highlight longer term trends or cycles.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1"># calculate 20 day and 50 day moving averages
</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">20_MA</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Close</span><span class="sh">"</span><span class="p">].</span><span class="nf">rolling</span><span class="p">(</span><span class="n">window</span><span class="o">=</span><span class="mi">20</span><span class="p">).</span><span class="nf">mean</span><span class="p">()</span>
<span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">50_MA</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Close</span><span class="sh">"</span><span class="p">].</span><span class="nf">rolling</span><span class="p">(</span><span class="n">window</span><span class="o">=</span><span class="mi">50</span><span class="p">).</span><span class="nf">mean</span><span class="p">()</span>

<span class="nf">print</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">tail</span><span class="p">())</span> 
</code></pre></div></div>
<p>Here is what the tail end of the data looks like:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                                 <span class="n">Open</span>        <span class="n">High</span>         <span class="n">Low</span>       <span class="n">Close</span>    <span class="n">Volume</span>  <span class="n">Dividends</span>  <span class="n">Stock</span> <span class="n">Splits</span>       <span class="mi">20</span><span class="n">_MA</span>       <span class="mi">50</span><span class="n">_MA</span>
<span class="n">Date</span>                                                                                                                                
<span class="mi">2024</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">04</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">-</span><span class="mi">05</span><span class="p">:</span><span class="mi">00</span>  <span class="mf">409.799988</span>  <span class="mf">410.420013</span>  <span class="mf">405.570007</span>  <span class="mf">408.459991</span>  <span class="mi">19672300</span>        <span class="mf">0.0</span>           <span class="mf">0.0</span>  <span class="mf">419.661501</span>  <span class="mf">420.520801</span>
<span class="mi">2024</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">05</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">-</span><span class="mi">05</span><span class="p">:</span><span class="mi">00</span>  <span class="mf">408.369995</span>  <span class="mf">414.899994</span>  <span class="mf">408.079987</span>  <span class="mf">411.459991</span>  <span class="mi">17626000</span>        <span class="mf">0.0</span>           <span class="mf">0.0</span>  <span class="mf">419.499001</span>  <span class="mf">420.480201</span>
<span class="mi">2024</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">06</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">-</span><span class="mi">05</span><span class="p">:</span><span class="mi">00</span>  <span class="mf">412.420013</span>  <span class="mf">420.450012</span>  <span class="mf">410.519989</span>  <span class="mf">420.179993</span>  <span class="mi">26681800</span>        <span class="mf">0.0</span>           <span class="mf">0.0</span>  <span class="mf">419.635001</span>  <span class="mf">420.607001</span>
<span class="mi">2024</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">07</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">-</span><span class="mi">05</span><span class="p">:</span><span class="mi">00</span>  <span class="mf">421.279999</span>  <span class="mf">426.850006</span>  <span class="mf">419.880005</span>  <span class="mf">425.429993</span>  <span class="mi">19862800</span>        <span class="mf">0.0</span>           <span class="mf">0.0</span>  <span class="mf">420.114500</span>  <span class="mf">420.903600</span>
<span class="mi">2024</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">08</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">-</span><span class="mi">05</span><span class="p">:</span><span class="mi">00</span>  <span class="mf">425.395996</span>  <span class="mf">426.500000</span>  <span class="mf">423.058197</span>  <span class="mf">423.663391</span>   <span class="mi">5727178</span>        <span class="mf">0.0</span>           <span class="mf">0.0</span>  <span class="mf">420.481670</span>  <span class="mf">421.114468</span>
</code></pre></div></div>

<h1 id="part-2-visualize-stock-prices-and-moving-averages">Part 2. Visualize Stock Prices and Moving Averages</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span><span class="mi">7</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Close</span><span class="sh">"</span><span class="p">],</span><span class="n">label</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Close Price</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">20_MA</span><span class="sh">"</span><span class="p">],</span><span class="n">label</span> <span class="o">=</span> <span class="sh">"</span><span class="s">20 day MA</span><span class="sh">"</span><span class="p">,</span> <span class="n">linestyle</span> <span class="o">=</span> <span class="sh">"</span><span class="s">--</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">50_MA</span><span class="sh">"</span><span class="p">],</span><span class="n">label</span> <span class="o">=</span> <span class="sh">"</span><span class="s">50 day MA</span><span class="sh">"</span><span class="p">,</span> <span class="n">linestyle</span> <span class="o">=</span> <span class="sh">"</span><span class="s">--</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">ticker</span><span class="si">}</span><span class="s"> Stock Price and Moving Averages</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Date</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Price</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
<span class="c1"># plt.show()
</span></code></pre></div></div>
<p>Plotting the moving averages helps to understand general trends and smooth out noise. 
<img src="http://localhost:4000/assets/images/stock_price_prediction/Figure_1.png" alt="image" /></p>

<h1 id="part-3-simple-anonomly-detection">Part 3. Simple Anonomly Detection</h1>
<p>I will define an anomaly as a day when the stock prices deviates significantly from the 20-day moving average. Any price that is more than two standard deviations away is flagged as an anomaly.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># calculate the rolling standard deviation 
</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">20_STD</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Close</span><span class="sh">"</span><span class="p">].</span><span class="nf">rolling</span><span class="p">(</span><span class="n">window</span><span class="o">=</span><span class="mi">20</span><span class="p">).</span><span class="nf">std</span><span class="p">()</span>

<span class="c1"># anomalies will be prices that are more than 2 std from the ma
</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Anomaly</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">where</span><span class="p">((</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Close</span><span class="sh">"</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">20_MA</span><span class="sh">"</span><span class="p">]</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">20_STD</span><span class="sh">"</span><span class="p">])</span><span class="o">|</span>
                           <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Close</span><span class="sh">"</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">20_MA</span><span class="sh">"</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">20_STD</span><span class="sh">"</span><span class="p">]),</span><span class="bp">True</span><span class="p">,</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># plot anomalies 
</span><span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span><span class="mi">7</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Close</span><span class="sh">"</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Close Price</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="sh">'</span><span class="s">blue</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">20_MA</span><span class="sh">"</span><span class="p">],</span><span class="n">label</span> <span class="o">=</span> <span class="sh">"</span><span class="s">20 day MA</span><span class="sh">"</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="sh">"</span><span class="s">orange</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Anomaly</span><span class="sh">"</span><span class="p">]].</span><span class="n">index</span><span class="p">,</span><span class="n">data</span><span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Anomaly</span><span class="sh">"</span><span class="p">]][</span><span class="sh">"</span><span class="s">Close</span><span class="sh">"</span><span class="p">],</span><span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">red</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">ticker</span><span class="si">}</span><span class="s"> Stock Price with Anomalies</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Date</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Price</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
<span class="c1"># plt.show()
</span></code></pre></div></div>
<p><img src="http://localhost:4000/assets/images/stock_price_prediction/Figure_2.png" alt="image" /></p>

<h1 id="part-3-simple-liquidity-scoring">Part 3. Simple Liquidity Scoring</h1>
<p>The score will be based on daily trading volme and price stability. Higher trading volumes and lower volatility indicate a higher liquidity. The volume and volatility features are normalized and averaged together to produce a liquidity score.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># normalize trading volume and rolling volatility 
</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Volume Score</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Volume</span><span class="sh">"</span><span class="p">]</span> <span class="o">-</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Volume</span><span class="sh">"</span><span class="p">].</span><span class="nf">min</span><span class="p">())</span> <span class="o">/</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Volume</span><span class="sh">"</span><span class="p">].</span><span class="nf">max</span><span class="p">()</span><span class="o">-</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Volume</span><span class="sh">"</span><span class="p">].</span><span class="nf">min</span><span class="p">())</span>
</code></pre></div></div>
<p>Volatility is the standard deviation of price changes. It represents the degree of price fluctuation 
First, normalize the volatility and then subtract it from 1. By doing this, assests with lower volatility get a score closer to 1, indicating higher liquidity and conversely.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># higher stability = higher score 
</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Volatility Score</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">20_STD</span><span class="sh">"</span><span class="p">]</span> <span class="o">/</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">20_STD</span><span class="sh">"</span><span class="p">].</span><span class="nf">max</span><span class="p">())</span>

<span class="c1"># calculate simple liquidity score 
</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Liquidity Score</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Volume Score</span><span class="sh">"</span><span class="p">]</span> <span class="o">+</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Volatility Score</span><span class="sh">"</span><span class="p">])</span> <span class="o">/</span> <span class="mi">2</span>

<span class="c1"># plot liquidity score 
</span><span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">14</span><span class="p">,</span><span class="mi">7</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Liquidity Score</span><span class="sh">"</span><span class="p">],</span><span class="n">label</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Liquidity Score</span><span class="sh">"</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="sh">"</span><span class="s">green</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">ticker</span><span class="si">}</span><span class="s"> Liquidity Score Over Time</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Date</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Liquiditty Score (0 to 1</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="http://localhost:4000/assets/images/stock_price_prediction/Figure_3.png" alt="image" /></p>

<p>This project can be further extended by using machine learning models for more complex forecasting or anomaly detection tasks.</p>]]></content><author><name></name></author><category term="Projects" /><summary type="html"><![CDATA[The goal of this project is to get familiar with financial data, review basic time series forecasting and anomaly detection. The project‚Äôs main objectives‚Äî prediction stock price trends and identifying unusual price movements‚Äî are easy to understand and measure. I will also create a simple liquidity score based on trading volume and price volatility, which will give me insight into how liquidity affects price stability.]]></summary></entry><entry><title type="html">GPT-2: Crafting Culinary Creativity üë©‚Äçüç≥ü•ë</title><link href="http://localhost:4000/projects/2024/08/22/GPT2-Recipe.html" rel="alternate" type="text/html" title="GPT-2: Crafting Culinary Creativity üë©‚Äçüç≥ü•ë" /><published>2024-08-22T00:00:00-04:00</published><updated>2024-08-22T00:00:00-04:00</updated><id>http://localhost:4000/projects/2024/08/22/GPT2-Recipe</id><content type="html" xml:base="http://localhost:4000/projects/2024/08/22/GPT2-Recipe.html"><![CDATA[<p>In today‚Äôs world of AI, the possibilities for innovation are endless, even in the kitchen. In this project I aim to leverage GPT-2 Medium to create a recipe generator and explain how to train and finetune this model to create diverse and unique recipes from a simple list of ingredients. 
GPT-2 Medium, which has 345 million parameters, is a good middle ground between other models while still providing a decent level of sophistication in generating coherent and contextually appropriate text. I found this model to be manageable in terms of the computational resources required for both training and inference.</p>

<p>More information about this <a href="https://huggingface.co/openai-community/gpt2-medium" target="_blank"> model </a> can be found in the model card from Hugging Face</p>

<h1 id="text-preprocessing">Text Preprocessing</h1>
<p>The data that was used for this project came from Kaggle. The <a href="https://www.kaggle.com/datasets/thedevastator/better-recipes-for-a-better-life" target="_blank"> dataset </a></p>

<p>the data set was reduced to include the following important features:</p>
<ul>
  <li>recipe_name: The name of the recipe. (String)</li>
  <li>ingredients: A list of ingredients required to make the recipe. (List)</li>
  <li>directions: A list of directions for preparing and cooking the recipe. (List)</li>
</ul>

<h1 id="training-and-finetuning">Training and Finetuning</h1>
<p>The first step to training the model is to convert the csv file into sequential text. This is important because language models like GPT-2 are trained to predict the next word in a sequence, given the previous words. For the model to understand how ingredients relate to the recipe name and directs, the data needs to show examples of how these elements are sequenced together in natural language i.e. as a continuous flow of text, much like how a human would read and understand a recipe. These models are designed to work with plain text data. While a CSV file is structured, it needs to be converted into a format that the model can understand.</p>

<p>It is possible to train the model with high-performance CPU‚Äôs, but training was much more manageable with access to a GPU.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># check if GPU is available
</span><span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">device</span><span class="p">(</span><span class="sh">"</span><span class="s">cuda</span><span class="sh">"</span> <span class="k">if</span> <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="sh">"</span><span class="s">cpu</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>
<p>The model and tokenizer are loaded using the <a href="https://huggingface.co/docs/transformers/en/index" target="_blank">transformers </a> library from Hugging Face</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">model_name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">gpt2-medium</span><span class="sh">"</span>
<span class="n">tokenizer</span> <span class="o">=</span> <span class="n">GPT2Tokenizer</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span><span class="n">model_name</span><span class="p">)</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">GPT2LMHeadModel</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span><span class="n">model_name</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nf">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</code></pre></div></div>

<p>The tokenizer is responsible for converting raw text into tokens(numbers) that the model can understand.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tokenizer</span> <span class="o">=</span> <span class="n">GPT2Tokenizer</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span><span class="n">model_name</span><span class="p">)</span>
<span class="n">tokenizer</span><span class="p">.</span><span class="n">add_special_tokens</span><span class="p">{</span><span class="sh">"</span><span class="s">pad_token</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">[PAD]</span><span class="sh">"</span><span class="p">}</span>
</code></pre></div></div>
<p>Padding tokens are used to ensure that all sequences in a batch are of the same length by filling shorter sequences with the padding token. While not required by GPT2-Medium, having uniform sequence lengths across a batch during training allows for efficient computation as it simplifies the implementation of parallel processing on GPUs.
It is important to then resize the model‚Äôs token embeddings to match the new size of the tokenizer‚Äôs vocabulary. Since the vocabulary size increased due to the addition of the padding token, the model‚Äôs embeddings are resized to include the new token.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">model</span><span class="p">.</span><span class="nf">resize_token_embeddings</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">tokenizer</span><span class="p">))</span>

</code></pre></div></div>
<p>The data collator is designed to handle the preparation of batches of data. This includes managing padding, masking, and other preprocessing tasks that are required when feeding data into a language model. 
One of the parameters included is masked language modeling (MLM), which is set to false, therefore indicating that we are using a standard language modeling setup. This parameter specifies whether the collator should create masked tokens (for models like BERT) or not. For GPT-2, this should be set to false because it is not trained using MLM but rather by predicting the next token in a sequence.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_collator</span> <span class="o">=</span> <span class="nc">DataCollatorForLanguageModeling</span><span class="p">(</span><span class="n">tokenizer</span><span class="o">=</span><span class="n">tokenizer</span><span class="p">,</span> <span class="n">mlm</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<p>After playing around with some of the training hyperparameters are I settled on these:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># set the training arguments 
</span><span class="n">training_args</span> <span class="o">=</span> <span class="nc">TrainingArguments</span><span class="p">(</span>
    <span class="n">output_dir</span><span class="o">=</span><span class="sh">"</span><span class="s">./results</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">overwrite_output_dir</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">num_train_epochs</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
    <span class="n">per_device_train_batch_size</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">save_steps</span><span class="o">=</span><span class="mi">10000</span><span class="p">,</span>
    <span class="n">save_total_limit</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>

<h1 id="generating-outputs">Generating Outputs</h1>
<p>A simple Flask app was created to read in ingredients from a user, which were then encoded using the tokenizer. 
The attention mask is used by the model to differentiate between real tokens and padding tokens. During training or inference, the model should only pay attention to the real tokens and ignore the padding tokens.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">attention_mask</span> <span class="o">=</span> <span class="n">inputs</span><span class="p">.</span><span class="nf">ne</span><span class="p">(</span><span class="n">tokenizer</span><span class="p">.</span><span class="n">pad_token_id</span><span class="p">).</span><span class="nf">long</span><span class="p">()</span>
</code></pre></div></div>
<p>The following hyperparameters were used when generating the recipes:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">generate</span><span class="p">(</span>
        <span class="n">inputs</span><span class="p">,</span>
        <span class="n">no_repeat_ngram_size</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span>
        <span class="n">attention_mask</span><span class="o">=</span><span class="n">attention_mask</span><span class="p">,</span>
        <span class="n">max_length</span><span class="o">=</span><span class="mi">250</span><span class="p">,</span>
        <span class="n">num_return_sequences</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
        <span class="n">temperature</span> <span class="o">=</span> <span class="mf">0.7</span><span class="p">,</span> <span class="c1"># adjusts randomness
</span>    <span class="p">)</span>
</code></pre></div></div>
<p><em>no_repeat_ngram_size prevents</em> the model from repeating any n-grams of a certain size. In this case, setting the hyperparameter to 2 ensures that no sequence of 2 tokens will be repeated in the generated text which helps to avoid repetetive outputs.</p>

<p><em>max_length</em> specifies the maximum length of the generated sequenece.</p>

<p><em>num_return_sequences</em> specifies the number of generated sequences to return</p>

<p><em>temperature</em> controls the randomness of the text generation. A lower temperature makes the output more focused and deterministic, while a higher temperature makes the output more random and diverse.</p>

<p>The outputs are then decoded with the tokenizer and sent back through the Flask app.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">recipe</span> <span class="o">=</span> <span class="n">tokenizer</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">outputs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">skip_special_tokens</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p>Here is an example of one of the results:</p>

<p><img src="http://localhost:4000/assets/images/GPT2_files/GPT_output.png" alt="image" height="400" width="900" /></p>

<p>The maraschino cherries are just an extra lil treat üòöü§å</p>

<p><a href="https://github.com/ilanazane/Recipe-Generation-GPT-2/tree/main" target="_blank"> Full code </a> can be found on my github.</p>]]></content><author><name></name></author><category term="Projects" /><summary type="html"><![CDATA[In today‚Äôs world of AI, the possibilities for innovation are endless, even in the kitchen. In this project I aim to leverage GPT-2 Medium to create a recipe generator and explain how to train and finetune this model to create diverse and unique recipes from a simple list of ingredients. GPT-2 Medium, which has 345 million parameters, is a good middle ground between other models while still providing a decent level of sophistication in generating coherent and contextually appropriate text. I found this model to be manageable in terms of the computational resources required for both training and inference.]]></summary></entry><entry><title type="html">RAG with BART: Conditional Generation and Question Answering üì∞</title><link href="http://localhost:4000/projects/2024/08/22/RAG.html" rel="alternate" type="text/html" title="RAG with BART: Conditional Generation and Question Answering üì∞" /><published>2024-08-22T00:00:00-04:00</published><updated>2024-08-22T00:00:00-04:00</updated><id>http://localhost:4000/projects/2024/08/22/RAG</id><content type="html" xml:base="http://localhost:4000/projects/2024/08/22/RAG.html"><![CDATA[]]></content><author><name></name></author><category term="Projects" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Summary: Searching for Best Practices in Retrieval-Augmented Generation</title><link href="http://localhost:4000/2024/07/10/PaperReview.html" rel="alternate" type="text/html" title="Summary: Searching for Best Practices in Retrieval-Augmented Generation" /><published>2024-07-10T00:00:00-04:00</published><updated>2024-07-10T00:00:00-04:00</updated><id>http://localhost:4000/2024/07/10/PaperReview</id><content type="html" xml:base="http://localhost:4000/2024/07/10/PaperReview.html"><![CDATA[<h2> Exploring Large Language Models: A New Frontier in Instruction Tuning </h2>

<h1> Introduction </h1>

<p>In the rapidly evolving field of artificial intelligence, instruction tuning has emerged as a critical process for improving the performance and reliability of large language models (LLMs). This blog post delves into a <a href="https://arxiv.org/pdf/2407.01219" target="_blank"> recent study </a> that sheds light on the impact of instruction tuning on LLMs, particularly focusing on performance improvement, systematic uncertainty reduction, and confidence calibration.</p>

<h1> Understanding Instruction Tuning </h1>
<p>Instruction tuning is a method designed to enhance the performance of LLMs by training them to follow specific instructions. This process is akin to refining the communication between the user and the model, ensuring that the model interprets and responds to instructions more accurately. The recent study explores how this tuning affects LLMs, offering insights into its benefits and potential applications.</p>

<h1> Key Findings </h1>
<p>The study presents a series of compelling findings that underscore the importance of instruction tuning:</p>

<ol>
  <li>
    <h4> Performance Improvement Across Tasks: </h4>
    <p>Instruction-tuned LLMs demonstrated a significant improvement in performance across various tasks. For instance, models like Falcon and Mistral showed an increase in performance by up to 20% on tasks from the BigBench benchmark suite.</p>
  </li>
  <li>
    <h4> Reduction in Systematic Uncertainty: </h4>
    <p>Instruction-tuned models exhibited a notable reduction in systematic uncertainty, leading to more reliable predictions. This improvement was quantified using metrics like expected calibration error (ECE) and maximum calibration error (MCE), highlighting the benefits of instruction tuning for both model reliability and safety.</p>
  </li>
  <li>
    <h4>Enhanced Confidence Calibration: </h4>
    <p>The study found that instruction tuning enhances the confidence calibration of LLMs. Models such as Tulu and Falcon showed significant reductions in ECE and MCE, indicating more accurate and reliable predictions. This improvement is particularly valuable for applications where decision-making is critical.</p>
  </li>
  <li>
    <h4> Broad Applicability Across Benchmarks: </h4>
    <p>The benefits of instruction tuning were not limited to specific tasks or benchmarks. Models trained with instruction tuning consistently outperformed their base counterparts across multiple benchmarks, including HELM, ARC, TruthfulQA, and many others. This broad applicability underscores the versatility and effectiveness of instruction tuning.</p>
  </li>
  <li>
    <h4> Exploration of Different Training Sets: </h4>
    <p>The study also explored the impact of different training sets on instruction tuning. For example, models trained with the Chatbot Arena training set showed distinct advantages, suggesting that the choice of training data can significantly influence the outcomes of instruction tuning.</p>
  </li>
</ol>

<h1> Practical Implications </h1>
<p>The findings from this study have profound implications for the development and deployment of LLMs:</p>

<ol>
  <li>
    <h4>Enhanced Reliability: </h4>
    <p>The reduction in systematic uncertainty and improved confidence calibration make instruction-tuned models more reliable for real-world applications.</p>
  </li>
  <li>
    <h4>Broad Applicability: </h4>
    <p>The consistent performance improvement across diverse tasks and benchmarks indicates that instruction tuning can be widely adopted across various domains.</p>
  </li>
  <li>
    <h4>Better Decision-Making: </h4>
    <p>Improved confidence calibration ensures that models can provide more accurate predictions, which is crucial for decision-making processes in critical applications.</p>
  </li>
</ol>

<h1> Conclusion </h1>
<p>Instruction tuning represents a significant advancement in the field of large language models. By improving performance, reducing systematic uncertainty, and enhancing confidence calibration, this technique holds the potential to make LLMs more reliable and effective across a wide range of applications. As AI continues to evolve, methods like instruction tuning will play a pivotal role in shaping the future of intelligent systems.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Exploring Large Language Models: A New Frontier in Instruction Tuning]]></summary></entry><entry><title type="html">Feature Engineering for Alpha Factor Research</title><link href="http://localhost:4000/2024/02/19/feature_engineering.html" rel="alternate" type="text/html" title="Feature Engineering for Alpha Factor Research" /><published>2024-02-19T00:00:00-05:00</published><updated>2024-02-19T00:00:00-05:00</updated><id>http://localhost:4000/2024/02/19/feature_engineering</id><content type="html" xml:base="http://localhost:4000/2024/02/19/feature_engineering.html"><![CDATA[<p>Alpha factors are mathematical expressions or models that aim to quantify the skill of an investment strategy in generating excess returns beyond what would be expected given the associated risks i.e. it represents the active return of a portfolio.</p>

<p>Here is the data that we are going to use:</p>

<p>The wiki prices is a NASDAQ dataset that has stock prices, dividends, and splits for 3000 US publicly-traded companies
<a href="https://data.nasdaq.com/tables/WIKIP/WIKI-PRICES/export">wiki prices data</a></p>

<p>The US Equities Meta-Data can be found on my github. Beware it is a large file ~1.8 GB. 
<a href="https://github.com/ilanazane/ML-for-Algorithmic-Trading/tree/main/Feature-Engineering">us equities meta data</a></p>

<h2 id="imports">Imports</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="n">pip</span> <span class="n">install</span> <span class="n">pandas_datareader</span>
<span class="o">%</span><span class="n">pip</span> <span class="n">install</span> <span class="n">statsmodels</span>

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">warnings</span>
<span class="n">warnings</span><span class="p">.</span><span class="nf">filterwarnings</span><span class="p">(</span><span class="sh">'</span><span class="s">ignore</span><span class="sh">'</span><span class="p">)</span>

<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">pandas_datareader.data</span> <span class="k">as</span> <span class="n">web</span>

<span class="kn">import</span> <span class="n">seaborn</span> <span class="k">as</span> <span class="n">sns</span>

<span class="kn">from</span> <span class="n">statsmodels.regression.rolling</span> <span class="kn">import</span> <span class="n">RollingOLS</span>

<span class="kn">import</span> <span class="n">statsmodels.api</span> <span class="k">as</span> <span class="n">sm</span>

<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">START</span> <span class="o">=</span> <span class="mi">2000</span>
<span class="n">END</span> <span class="o">=</span> <span class="mi">2018</span>

<span class="n">idx</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">IndexSlice</span>
</code></pre></div></div>
<h2 id="read-and-store-data">Read and Store Data</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># parse prices data 
</span>
<span class="n">df_prices</span> <span class="o">=</span> <span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">WIKI_PRICES.csv</span><span class="sh">'</span><span class="p">,</span>
                 <span class="n">parse_dates</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">date</span><span class="sh">'</span><span class="p">],</span>
                 <span class="n">index_col</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">date</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">ticker</span><span class="sh">'</span><span class="p">],</span>
                 <span class="n">infer_datetime_format</span><span class="o">=</span><span class="bp">True</span><span class="p">)).</span><span class="nf">sort_index</span><span class="p">()</span>

<span class="n">df_screener</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">us_equities_meta_data.csv</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># store price and stock data 
</span>
<span class="k">with</span> <span class="n">pd</span><span class="p">.</span><span class="nc">HDFStore</span><span class="p">(</span><span class="sh">'</span><span class="s">assets.h5</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">store</span><span class="p">:</span>
    <span class="n">store</span><span class="p">.</span><span class="nf">put</span><span class="p">(</span><span class="sh">'</span><span class="s">data_prices</span><span class="sh">'</span><span class="p">,</span><span class="n">df_prices</span><span class="p">)</span>
    <span class="n">store</span><span class="p">.</span><span class="nf">put</span><span class="p">(</span><span class="sh">'</span><span class="s">data_screener</span><span class="sh">'</span><span class="p">,</span><span class="n">df_screener</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># read in prices and stocks 
</span><span class="sh">'''</span><span class="s">
get all the dates between START and END and 
then get the adj_close column 
reshape df by turning the tickers into the columns and have the adj value for every date 
we convert the rows into columns so that we can easily access the tickers later on 
</span><span class="sh">'''</span>


<span class="k">with</span> <span class="n">pd</span><span class="p">.</span><span class="nc">HDFStore</span><span class="p">(</span><span class="sh">'</span><span class="s">assets.h5</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">store</span><span class="p">:</span>
    <span class="n">prices</span> <span class="o">=</span> <span class="p">(</span><span class="n">store</span><span class="p">[</span><span class="sh">'</span><span class="s">data_prices</span><span class="sh">'</span><span class="p">]</span>
              <span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="n">START</span><span class="p">):</span><span class="nf">str</span><span class="p">(</span><span class="n">END</span><span class="p">),</span> <span class="p">:],</span> <span class="sh">'</span><span class="s">adj_close</span><span class="sh">'</span><span class="p">]</span>
              <span class="p">.</span><span class="nf">unstack</span><span class="p">(</span><span class="sh">'</span><span class="s">ticker</span><span class="sh">'</span><span class="p">))</span>
    <span class="n">stocks</span> <span class="o">=</span> <span class="n">store</span><span class="p">[</span><span class="sh">'</span><span class="s">data_screener</span><span class="sh">'</span><span class="p">].</span><span class="n">loc</span><span class="p">[:,</span> <span class="p">[</span><span class="sh">'</span><span class="s">ticker</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">marketcap</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">ipoyear</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">sector</span><span class="sh">'</span><span class="p">]]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">prices</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
DatetimeIndex: 4706 entries, 2000-01-03 to 2018-03-27
Columns: 3199 entries, A to ZUMZ
dtypes: float64(3199)
memory usage: 114.9 MB
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">stocks</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 6834 entries, 0 to 6833
Data columns (total 4 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   ticker     6834 non-null   object 
 1   marketcap  5766 non-null   float64
 2   ipoyear    3038 non-null   float64
 3   sector     5288 non-null   object 
dtypes: float64(2), object(2)
memory usage: 267.0+ KB
</code></pre></div></div>

<h2 id="data-cleaning">Data Cleaning</h2>
<p>remove stock duplicates and reset the index name for later data manipulation</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">stocks</span> <span class="o">=</span> <span class="n">stocks</span><span class="p">[</span><span class="o">~</span><span class="n">stocks</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="nf">duplicated</span><span class="p">()]</span>
<span class="n">stocks</span> <span class="o">=</span> <span class="n">stocks</span><span class="p">.</span><span class="nf">set_index</span><span class="p">(</span><span class="sh">'</span><span class="s">ticker</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<p>get all of the common tickers with their price information and metadata</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">shared</span> <span class="o">=</span> <span class="n">prices</span><span class="p">.</span><span class="n">columns</span><span class="p">.</span><span class="nf">intersection</span><span class="p">(</span><span class="n">stocks</span><span class="p">.</span><span class="n">index</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">stocks</span> <span class="o">=</span> <span class="n">stocks</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">shared</span><span class="p">,</span> <span class="p">:]</span>
<span class="n">stocks</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
Index: 2412 entries, A to ZUMZ
Data columns (total 3 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   marketcap  2407 non-null   float64
 1   ipoyear    1065 non-null   float64
 2   sector     2372 non-null   object 
dtypes: float64(2), object(1)
memory usage: 75.4+ KB
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">prices</span> <span class="o">=</span> <span class="n">prices</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span> <span class="n">shared</span><span class="p">]</span>
<span class="n">prices</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
DatetimeIndex: 4706 entries, 2000-01-03 to 2018-03-27
Columns: 2412 entries, A to ZUMZ
dtypes: float64(2412)
memory usage: 86.6 MB
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">assert</span> <span class="n">prices</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">stocks</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="create-a-monthly-return-series">Create a Monthly Return Series</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">monthly_prices</span> <span class="o">=</span> <span class="n">prices</span><span class="p">.</span><span class="nf">resample</span><span class="p">(</span><span class="sh">'</span><span class="s">M</span><span class="sh">'</span><span class="p">).</span><span class="nf">last</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">monthly_prices</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
DatetimeIndex: 219 entries, 2000-01-31 to 2018-03-31
Freq: M
Columns: 2412 entries, A to ZUMZ
dtypes: float64(2412)
memory usage: 4.0 MB
</code></pre></div></div>

<p>Here, we calculate the precentage change of monthly prices over a lag period. This represents the return over the specified number of months.</p>

<p>Clip outliers in the data based on the <code class="language-plaintext highlighter-rouge">outlier_cutoff</code> quantile and the <code class="language-plaintext highlighter-rouge">1- outlier_cutoff</code> to their respective quantile values. Add 1 to the clipped values. This is to handle returns and convert percentage changes back to absolute returns.</p>

<p>Raise each value to the power of \(\frac{1}{lag}\). This is used to annualize returns when the lag is representative of months.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">outlier_cutoff</span> <span class="o">=</span> <span class="mf">0.01</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">()</span>
<span class="n">lags</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">12</span><span class="p">]</span>
<span class="k">for</span> <span class="n">lag</span> <span class="ow">in</span> <span class="n">lags</span><span class="p">:</span>
    <span class="n">data</span><span class="p">[</span><span class="sa">f</span><span class="sh">'</span><span class="s">return_</span><span class="si">{</span><span class="n">lag</span><span class="si">}</span><span class="s">m</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">monthly_prices</span>
                           <span class="p">.</span><span class="nf">pct_change</span><span class="p">(</span><span class="n">lag</span><span class="p">)</span> 
                           <span class="p">.</span><span class="nf">stack</span><span class="p">()</span>         
                           <span class="p">.</span><span class="nf">pipe</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">.</span><span class="nf">clip</span><span class="p">(</span><span class="n">lower</span><span class="o">=</span><span class="n">x</span><span class="p">.</span><span class="nf">quantile</span><span class="p">(</span><span class="n">outlier_cutoff</span><span class="p">),</span>
                                                  <span class="n">upper</span><span class="o">=</span><span class="n">x</span><span class="p">.</span><span class="nf">quantile</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">outlier_cutoff</span><span class="p">)))</span> 
                           <span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
                           <span class="p">.</span><span class="nf">pow</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="n">lag</span><span class="p">)</span>
                           <span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
                           <span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">swaplevel</span><span class="p">().</span><span class="nf">dropna</span><span class="p">()</span>
<span class="n">data</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
MultiIndex: 399525 entries, ('A', Timestamp('2001-01-31 00:00:00', freq='M')) to ('ZUMZ', Timestamp('2018-03-31 00:00:00', freq='M'))
Data columns (total 6 columns):
 #   Column      Non-Null Count   Dtype  
---  ------      --------------   -----  
 0   return_1m   399525 non-null  float64
 1   return_2m   399525 non-null  float64
 2   return_3m   399525 non-null  float64
 3   return_6m   399525 non-null  float64
 4   return_9m   399525 non-null  float64
 5   return_12m  399525 non-null  float64
dtypes: float64(6)
memory usage: 19.9+ MB
</code></pre></div></div>

<h2 id="drop-stocks-with-less-than-10-years-of-returns">Drop Stocks with Less than 10 Years of Returns</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">min_obs</span> <span class="o">=</span> <span class="mi">120</span>

<span class="c1"># get the number of observations for each ticker 
</span><span class="n">nobs</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="sh">'</span><span class="s">ticker</span><span class="sh">'</span><span class="p">).</span><span class="nf">size</span><span class="p">()</span>

<span class="c1"># get the indices of the tickers where the num of observations is greater than min_obs
</span><span class="n">keep</span> <span class="o">=</span> <span class="n">nobs</span><span class="p">[</span><span class="n">nobs</span><span class="o">&gt;</span><span class="n">min_obs</span><span class="p">].</span><span class="n">index</span>

<span class="c1"># get the data with appropriate tickers and their respective data 
</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="p">[</span><span class="n">keep</span><span class="p">,:],</span> <span class="p">:]</span>
<span class="n">data</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
MultiIndex: 360752 entries, ('A', Timestamp('2001-01-31 00:00:00', freq='M')) to ('ZUMZ', Timestamp('2018-03-31 00:00:00', freq='M'))
Data columns (total 6 columns):
 #   Column      Non-Null Count   Dtype  
---  ------      --------------   -----  
 0   return_1m   360752 non-null  float64
 1   return_2m   360752 non-null  float64
 2   return_3m   360752 non-null  float64
 3   return_6m   360752 non-null  float64
 4   return_9m   360752 non-null  float64
 5   return_12m  360752 non-null  float64
dtypes: float64(6)
memory usage: 18.0+ MB
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span><span class="p">.</span><span class="nf">describe</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>return_1m</th>
      <th>return_2m</th>
      <th>return_3m</th>
      <th>return_6m</th>
      <th>return_9m</th>
      <th>return_12m</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>360752.000000</td>
      <td>360752.000000</td>
      <td>360752.000000</td>
      <td>360752.000000</td>
      <td>360752.000000</td>
      <td>360752.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>0.012255</td>
      <td>0.009213</td>
      <td>0.008181</td>
      <td>0.007025</td>
      <td>0.006552</td>
      <td>0.006296</td>
    </tr>
    <tr>
      <th>std</th>
      <td>0.114236</td>
      <td>0.081170</td>
      <td>0.066584</td>
      <td>0.048474</td>
      <td>0.039897</td>
      <td>0.034792</td>
    </tr>
    <tr>
      <th>min</th>
      <td>-0.329564</td>
      <td>-0.255452</td>
      <td>-0.214783</td>
      <td>-0.162063</td>
      <td>-0.131996</td>
      <td>-0.114283</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>-0.046464</td>
      <td>-0.030716</td>
      <td>-0.023961</td>
      <td>-0.014922</td>
      <td>-0.011182</td>
      <td>-0.009064</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>0.009448</td>
      <td>0.009748</td>
      <td>0.009744</td>
      <td>0.009378</td>
      <td>0.008982</td>
      <td>0.008726</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>0.066000</td>
      <td>0.049249</td>
      <td>0.042069</td>
      <td>0.031971</td>
      <td>0.027183</td>
      <td>0.024615</td>
    </tr>
    <tr>
      <th>max</th>
      <td>0.430943</td>
      <td>0.281819</td>
      <td>0.221789</td>
      <td>0.154555</td>
      <td>0.124718</td>
      <td>0.106371</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sns</span><span class="p">.</span><span class="nf">clustermap</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">corr</span><span class="p">(</span><span class="sh">'</span><span class="s">spearman</span><span class="sh">'</span><span class="p">),</span> <span class="n">annot</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">center</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">Blues</span><span class="sh">'</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="http://localhost:4000/assets/images/feature_engineering_files/feature_engineering_26_0.png" alt="image" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="nf">get_level_values</span><span class="p">(</span><span class="sh">'</span><span class="s">ticker</span><span class="sh">'</span><span class="p">).</span><span class="nf">nunique</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1838
</code></pre></div></div>

<h2 id="rolling-factor-betas">Rolling Factor Betas</h2>

<p>In this section we are going to estimate the factor exposure of the listed stocks in the database according to the Fama-French Five-Factor Model.</p>

<p><code class="language-plaintext highlighter-rouge">Mkt-Rf</code> is the market risk premium \((R_m - R_f)\). The difference between these two factors represents the additional return investors demand for bearing the systemic risk associated with the market.</p>

<p><code class="language-plaintext highlighter-rouge">SMB</code> is small minus big. This factor represents the spread between small-cap and large-cap stocks.</p>

<p>SMB is typically measured in terms of market capitalization which is represented as \(MarketCapitalization = currentStockPrice * TotalNumberOfOutstandingShares\)</p>

<p><code class="language-plaintext highlighter-rouge">HML</code> is high minus low, which is the spread between high book-to-market and low book-to-market stocks. The book-to-market ratio is \(\frac{shareholder'sEquity}{marketCapitalization}\).</p>

<p><code class="language-plaintext highlighter-rouge">RMW</code> is robust minus weak. This compares the returns of firms with higher operating profitability and those with weak operating probitability</p>

<p><code class="language-plaintext highlighter-rouge">CMA</code> is conservative minus aggressive and it gauges the difference between companies that invest aggressively and those that do so more conservatively.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">factors</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">Mkt-RF</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">SMB</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">HML</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">RMW</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">CMA</span><span class="sh">'</span><span class="p">]</span>
<span class="n">factor_data</span> <span class="o">=</span> <span class="n">web</span><span class="p">.</span><span class="nc">DataReader</span><span class="p">(</span><span class="sh">'</span><span class="s">F-F_Research_Data_5_Factors_2x3</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">famafrench</span><span class="sh">'</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="sh">'</span><span class="s">2000</span><span class="sh">'</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nf">drop</span><span class="p">(</span><span class="sh">'</span><span class="s">RF</span><span class="sh">'</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">factor_data</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">factor_data</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="nf">to_timestamp</span><span class="p">()</span>
<span class="n">factor_data</span> <span class="o">=</span> <span class="n">factor_data</span><span class="p">.</span><span class="nf">resample</span><span class="p">(</span><span class="sh">'</span><span class="s">M</span><span class="sh">'</span><span class="p">).</span><span class="nf">last</span><span class="p">().</span><span class="nf">div</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="n">factor_data</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="sh">'</span><span class="s">date</span><span class="sh">'</span>
<span class="n">factor_data</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
DatetimeIndex: 289 entries, 2000-01-31 to 2024-01-31
Freq: M
Data columns (total 5 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   Mkt-RF  289 non-null    float64
 1   SMB     289 non-null    float64
 2   HML     289 non-null    float64
 3   RMW     289 non-null    float64
 4   CMA     289 non-null    float64
dtypes: float64(5)
memory usage: 13.5 KB
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">factor_data</span> <span class="o">=</span> <span class="n">factor_data</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">return_1m</span><span class="sh">'</span><span class="p">]).</span><span class="nf">sort_index</span><span class="p">()</span>
<span class="n">factor_data</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
MultiIndex: 360752 entries, ('A', Timestamp('2001-01-31 00:00:00', freq='M')) to ('ZUMZ', Timestamp('2018-03-31 00:00:00', freq='M'))
Data columns (total 6 columns):
 #   Column     Non-Null Count   Dtype  
---  ------     --------------   -----  
 0   Mkt-RF     360752 non-null  float64
 1   SMB        360752 non-null  float64
 2   HML        360752 non-null  float64
 3   RMW        360752 non-null  float64
 4   CMA        360752 non-null  float64
 5   return_1m  360752 non-null  float64
dtypes: float64(6)
memory usage: 18.0+ MB
</code></pre></div></div>

<p>Unlike traditional linear regression that considers an entire dataset, rolling linear regression calculates regresion coefficients and other statistics for a specified window of consecutive data points and then moves a window forward one observation at a time. 
Rolling Linear Regression is helpful when delaing with non-stationary time series data.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">T</span> <span class="o">=</span> <span class="mi">24</span>
<span class="n">betas</span> <span class="o">=</span> <span class="p">(</span><span class="n">factor_data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="sh">'</span><span class="s">ticker</span><span class="sh">'</span><span class="p">,</span>
                             <span class="n">group_keys</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
         <span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nc">RollingOLS</span><span class="p">(</span><span class="n">endog</span><span class="o">=</span><span class="n">x</span><span class="p">.</span><span class="n">return_1m</span><span class="p">,</span>
                                     <span class="n">exog</span><span class="o">=</span><span class="n">sm</span><span class="p">.</span><span class="nf">add_constant</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="nf">drop</span><span class="p">(</span><span class="sh">'</span><span class="s">return_1m</span><span class="sh">'</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)),</span>
                                     <span class="n">window</span><span class="o">=</span><span class="nf">min</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
                <span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">params_only</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
                <span class="p">.</span><span class="n">params</span>
                <span class="p">.</span><span class="nf">drop</span><span class="p">(</span><span class="sh">'</span><span class="s">const</span><span class="sh">'</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">betas</span><span class="p">.</span><span class="nf">describe</span><span class="p">().</span><span class="nf">join</span><span class="p">(</span><span class="n">betas</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nf">describe</span><span class="p">().</span><span class="nf">to_frame</span><span class="p">(</span><span class="sh">'</span><span class="s">total</span><span class="sh">'</span><span class="p">))</span>

</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Mkt-RF</th>
      <th>SMB</th>
      <th>HML</th>
      <th>RMW</th>
      <th>CMA</th>
      <th>total</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>318478.000000</td>
      <td>318478.000000</td>
      <td>318478.000000</td>
      <td>318478.000000</td>
      <td>318478.000000</td>
      <td>360752.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>0.979365</td>
      <td>0.626588</td>
      <td>0.122610</td>
      <td>-0.062073</td>
      <td>0.016754</td>
      <td>1.485997</td>
    </tr>
    <tr>
      <th>std</th>
      <td>0.918116</td>
      <td>1.254249</td>
      <td>1.603524</td>
      <td>1.908446</td>
      <td>2.158982</td>
      <td>3.306487</td>
    </tr>
    <tr>
      <th>min</th>
      <td>-9.805604</td>
      <td>-10.407516</td>
      <td>-15.382504</td>
      <td>-23.159702</td>
      <td>-18.406854</td>
      <td>-33.499590</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>0.463725</td>
      <td>-0.118767</td>
      <td>-0.707780</td>
      <td>-0.973586</td>
      <td>-1.071697</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>0.928902</td>
      <td>0.541623</td>
      <td>0.095292</td>
      <td>0.037585</td>
      <td>0.040641</td>
      <td>1.213499</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>1.444882</td>
      <td>1.304325</td>
      <td>0.946760</td>
      <td>0.950267</td>
      <td>1.135600</td>
      <td>3.147199</td>
    </tr>
    <tr>
      <th>max</th>
      <td>10.855709</td>
      <td>10.297453</td>
      <td>15.038572</td>
      <td>17.079472</td>
      <td>16.671709</td>
      <td>34.259432</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cmap</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">diverging_palette</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">220</span><span class="p">,</span><span class="n">as_cmap</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">clustermap</span><span class="p">(</span><span class="n">betas</span><span class="p">.</span><span class="nf">corr</span><span class="p">(),</span><span class="n">annot</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span><span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">,</span><span class="n">center</span><span class="o">=</span><span class="mi">0</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="http://localhost:4000/assets/images/feature_engineering_files/feature_engineering_33_0.png" alt="image" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">betas</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="sh">'</span><span class="s">ticker</span><span class="sh">'</span><span class="p">).</span><span class="nf">shift</span><span class="p">()))</span>
<span class="n">data</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
MultiIndex: 360752 entries, ('A', Timestamp('2001-01-31 00:00:00', freq='M')) to ('ZUMZ', Timestamp('2018-03-31 00:00:00', freq='M'))
Data columns (total 11 columns):
 #   Column      Non-Null Count   Dtype  
---  ------      --------------   -----  
 0   return_1m   360752 non-null  float64
 1   return_2m   360752 non-null  float64
 2   return_3m   360752 non-null  float64
 3   return_6m   360752 non-null  float64
 4   return_9m   360752 non-null  float64
 5   return_12m  360752 non-null  float64
 6   Mkt-RF      316640 non-null  float64
 7   SMB         316640 non-null  float64
 8   HML         316640 non-null  float64
 9   RMW         316640 non-null  float64
 10  CMA         316640 non-null  float64
dtypes: float64(11)
memory usage: 39.8+ MB
</code></pre></div></div>

<h2 id="impute-mean-for-missing-factor-betas">Impute Mean for Missing Factor Betas</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span> <span class="n">factors</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="sh">'</span><span class="s">ticker</span><span class="sh">'</span><span class="p">)[</span><span class="n">factors</span><span class="p">].</span><span class="nf">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">.</span><span class="nf">fillna</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="nf">mean</span><span class="p">()))</span>
<span class="n">data</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
MultiIndex: 360752 entries, ('A', Timestamp('2001-01-31 00:00:00', freq='M')) to ('ZUMZ', Timestamp('2018-03-31 00:00:00', freq='M'))
Data columns (total 11 columns):
 #   Column      Non-Null Count   Dtype  
---  ------      --------------   -----  
 0   return_1m   360752 non-null  float64
 1   return_2m   360752 non-null  float64
 2   return_3m   360752 non-null  float64
 3   return_6m   360752 non-null  float64
 4   return_9m   360752 non-null  float64
 5   return_12m  360752 non-null  float64
 6   Mkt-RF      360752 non-null  float64
 7   SMB         360752 non-null  float64
 8   HML         360752 non-null  float64
 9   RMW         360752 non-null  float64
 10  CMA         360752 non-null  float64
dtypes: float64(11)
memory usage: 39.8+ MB
</code></pre></div></div>

<h2 id="momentum-factors">Momentum Factors</h2>

<p>Momentum represents the speed or velocity in which prices change in a publicly traded security. Momentum is caluclated by taking the return of the equal weighted average of the 30% highest performing stocks minus the return of the equal weighted average of the 30% lowest performing stocks.</p>

<p>Here, we create multiple momentum factors based on different lag periods and an additional momentum factor based on the difference between the 12 month and 3 month returns.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">lag</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">12</span><span class="p">]:</span>
    <span class="c1"># for each value in the loop, calculate new column
</span>    <span class="c1"># momentum is computed as the difference between the return for that lag period 
</span>    <span class="c1"># and the reutrn for the most recent month 
</span>    <span class="n">data</span><span class="p">[</span><span class="sa">f</span><span class="sh">'</span><span class="s">momentum_</span><span class="si">{</span><span class="n">lag</span><span class="si">}</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sa">f</span><span class="sh">'</span><span class="s">return_</span><span class="si">{</span><span class="n">lag</span><span class="si">}</span><span class="s">m</span><span class="sh">'</span><span class="p">].</span><span class="nf">sub</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">return_1m</span><span class="p">)</span>
    
<span class="n">data</span><span class="p">[</span><span class="sa">f</span><span class="sh">'</span><span class="s">momentum_3_12</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sa">f</span><span class="sh">'</span><span class="s">return_12m</span><span class="sh">'</span><span class="p">].</span><span class="nf">sub</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">return_3m</span><span class="p">)</span>

</code></pre></div></div>

<h2 id="date-indicators">Date Indicators</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># date indicators 
</span>
<span class="n">dates</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="nf">get_level_values</span><span class="p">(</span><span class="sh">'</span><span class="s">date</span><span class="sh">'</span><span class="p">)</span>
<span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">year</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">dates</span><span class="p">.</span><span class="n">year</span> 
<span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">month</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">dates</span><span class="p">.</span><span class="n">month</span>
</code></pre></div></div>

<h2 id="lagged-returns">Lagged Returns</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># to use lagged values as input variables or features associated with the current observations 
# we use the shift function to move historical returns up to the current period 
</span>
<span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">7</span><span class="p">):</span>
    <span class="n">data</span><span class="p">[</span><span class="sa">f</span><span class="sh">'</span><span class="s">return_1m_t-</span><span class="si">{</span><span class="n">t</span><span class="si">}</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="sh">'</span><span class="s">ticker</span><span class="sh">'</span><span class="p">).</span><span class="n">return_1m</span><span class="p">.</span><span class="nf">shift</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
MultiIndex: 360752 entries, ('A', Timestamp('2001-01-31 00:00:00', freq='M')) to ('ZUMZ', Timestamp('2018-03-31 00:00:00', freq='M'))
Data columns (total 25 columns):
 #   Column         Non-Null Count   Dtype  
---  ------         --------------   -----  
 0   return_1m      360752 non-null  float64
 1   return_2m      360752 non-null  float64
 2   return_3m      360752 non-null  float64
 3   return_6m      360752 non-null  float64
 4   return_9m      360752 non-null  float64
 5   return_12m     360752 non-null  float64
 6   Mkt-RF         360752 non-null  float64
 7   SMB            360752 non-null  float64
 8   HML            360752 non-null  float64
 9   RMW            360752 non-null  float64
 10  CMA            360752 non-null  float64
 11  momentum_2     360752 non-null  float64
 12  momentum_3     360752 non-null  float64
 13  momentum_6     360752 non-null  float64
 14  momentum_9     360752 non-null  float64
 15  momentum_12    360752 non-null  float64
 16  momentum_3_12  360752 non-null  float64
 17  year           360752 non-null  int64  
 18  month          360752 non-null  int64  
 19  return_1m_t-1  358914 non-null  float64
 20  return_1m_t-2  357076 non-null  float64
 21  return_1m_t-3  355238 non-null  float64
 22  return_1m_t-4  353400 non-null  float64
 23  return_1m_t-5  351562 non-null  float64
 24  return_1m_t-6  349724 non-null  float64
dtypes: float64(23), int64(2)
memory usage: 78.3+ MB
</code></pre></div></div>

<h2 id="target-holding-period-returns">Target: Holding Period Returns</h2>

<p>Holding period returns are the total return an investor earns or loses from holding an investment over a specific period of time. \(HPR = \frac{(endingValue - beginningValue + income)}{beginningValue}*100\%\)</p>

<p>Use the normalized period returns computed previously and shift them back to align them with the current financial features</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">12</span><span class="p">]:</span>
    <span class="n">data</span><span class="p">[</span><span class="sa">f</span><span class="sh">'</span><span class="s">target_</span><span class="si">{</span><span class="n">t</span><span class="si">}</span><span class="s">m</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="sh">'</span><span class="s">ticker</span><span class="sh">'</span><span class="p">)[</span><span class="sa">f</span><span class="sh">'</span><span class="s">return_</span><span class="si">{</span><span class="n">t</span><span class="si">}</span><span class="s">m</span><span class="sh">'</span><span class="p">].</span><span class="nf">shift</span><span class="p">(</span><span class="o">-</span><span class="n">t</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cols</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">target_1m</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">target_2m</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">target_3m</span><span class="sh">'</span><span class="p">,</span> 
        <span class="sh">'</span><span class="s">return_1m</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">return_2m</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">return_3m</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">return_1m_t-1</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">return_1m_t-2</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">return_1m_t-3</span><span class="sh">'</span><span class="p">]</span>

<span class="n">data</span><span class="p">[</span><span class="n">cols</span><span class="p">].</span><span class="nf">dropna</span><span class="p">().</span><span class="nf">sort_index</span><span class="p">().</span><span class="nf">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>target_1m</th>
      <th>target_2m</th>
      <th>target_3m</th>
      <th>return_1m</th>
      <th>return_2m</th>
      <th>return_3m</th>
      <th>return_1m_t-1</th>
      <th>return_1m_t-2</th>
      <th>return_1m_t-3</th>
    </tr>
    <tr>
      <th>ticker</th>
      <th>date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="10" valign="top">A</th>
      <th>2001-04-30</th>
      <td>-0.140220</td>
      <td>-0.087246</td>
      <td>-0.098192</td>
      <td>0.269444</td>
      <td>0.040966</td>
      <td>-0.105747</td>
      <td>-0.146389</td>
      <td>-0.329564</td>
      <td>-0.003653</td>
    </tr>
    <tr>
      <th>2001-05-31</th>
      <td>-0.031008</td>
      <td>-0.076414</td>
      <td>-0.075527</td>
      <td>-0.140220</td>
      <td>0.044721</td>
      <td>-0.023317</td>
      <td>0.269444</td>
      <td>-0.146389</td>
      <td>-0.329564</td>
    </tr>
    <tr>
      <th>2001-06-30</th>
      <td>-0.119692</td>
      <td>-0.097014</td>
      <td>-0.155847</td>
      <td>-0.031008</td>
      <td>-0.087246</td>
      <td>0.018842</td>
      <td>-0.140220</td>
      <td>0.269444</td>
      <td>-0.146389</td>
    </tr>
    <tr>
      <th>2001-07-31</th>
      <td>-0.073750</td>
      <td>-0.173364</td>
      <td>-0.080114</td>
      <td>-0.119692</td>
      <td>-0.076414</td>
      <td>-0.098192</td>
      <td>-0.031008</td>
      <td>-0.140220</td>
      <td>0.269444</td>
    </tr>
    <tr>
      <th>2001-08-31</th>
      <td>-0.262264</td>
      <td>-0.083279</td>
      <td>0.009593</td>
      <td>-0.073750</td>
      <td>-0.097014</td>
      <td>-0.075527</td>
      <td>-0.119692</td>
      <td>-0.031008</td>
      <td>-0.140220</td>
    </tr>
    <tr>
      <th>2001-09-30</th>
      <td>0.139130</td>
      <td>0.181052</td>
      <td>0.134010</td>
      <td>-0.262264</td>
      <td>-0.173364</td>
      <td>-0.155847</td>
      <td>-0.073750</td>
      <td>-0.119692</td>
      <td>-0.031008</td>
    </tr>
    <tr>
      <th>2001-10-31</th>
      <td>0.224517</td>
      <td>0.131458</td>
      <td>0.108697</td>
      <td>0.139130</td>
      <td>-0.083279</td>
      <td>-0.080114</td>
      <td>-0.262264</td>
      <td>-0.073750</td>
      <td>-0.119692</td>
    </tr>
    <tr>
      <th>2001-11-30</th>
      <td>0.045471</td>
      <td>0.054962</td>
      <td>0.045340</td>
      <td>0.224517</td>
      <td>0.181052</td>
      <td>0.009593</td>
      <td>0.139130</td>
      <td>-0.262264</td>
      <td>-0.073750</td>
    </tr>
    <tr>
      <th>2001-12-31</th>
      <td>0.064539</td>
      <td>0.045275</td>
      <td>0.070347</td>
      <td>0.045471</td>
      <td>0.131458</td>
      <td>0.134010</td>
      <td>0.224517</td>
      <td>0.139130</td>
      <td>-0.262264</td>
    </tr>
    <tr>
      <th>2002-01-31</th>
      <td>0.026359</td>
      <td>0.073264</td>
      <td>-0.003306</td>
      <td>0.064539</td>
      <td>0.054962</td>
      <td>0.108697</td>
      <td>0.045471</td>
      <td>0.224517</td>
      <td>0.139130</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
MultiIndex: 360752 entries, ('A', Timestamp('2001-01-31 00:00:00', freq='M')) to ('ZUMZ', Timestamp('2018-03-31 00:00:00', freq='M'))
Data columns (total 30 columns):
 #   Column         Non-Null Count   Dtype  
---  ------         --------------   -----  
 0   return_1m      360752 non-null  float64
 1   return_2m      360752 non-null  float64
 2   return_3m      360752 non-null  float64
 3   return_6m      360752 non-null  float64
 4   return_9m      360752 non-null  float64
 5   return_12m     360752 non-null  float64
 6   Mkt-RF         360752 non-null  float64
 7   SMB            360752 non-null  float64
 8   HML            360752 non-null  float64
 9   RMW            360752 non-null  float64
 10  CMA            360752 non-null  float64
 11  momentum_2     360752 non-null  float64
 12  momentum_3     360752 non-null  float64
 13  momentum_6     360752 non-null  float64
 14  momentum_9     360752 non-null  float64
 15  momentum_12    360752 non-null  float64
 16  momentum_3_12  360752 non-null  float64
 17  year           360752 non-null  int64  
 18  month          360752 non-null  int64  
 19  return_1m_t-1  358914 non-null  float64
 20  return_1m_t-2  357076 non-null  float64
 21  return_1m_t-3  355238 non-null  float64
 22  return_1m_t-4  353400 non-null  float64
 23  return_1m_t-5  351562 non-null  float64
 24  return_1m_t-6  349724 non-null  float64
 25  target_1m      358914 non-null  float64
 26  target_2m      357076 non-null  float64
 27  target_3m      355238 non-null  float64
 28  target_6m      349724 non-null  float64
 29  target_12m     338696 non-null  float64
dtypes: float64(28), int64(2)
memory usage: 92.1+ MB
</code></pre></div></div>

<h2 id="create-age-proxy">Create Age Proxy</h2>
<p>Here, we use quintiles of the IPO year as a proxy for company age. This means dividing a set of IPOs into five groups, or quintiles, based on the year in wihch each company went public. Each quintile represents a subset of companies that went public during a specific range of years.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span>
        <span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="nf">qcut</span><span class="p">(</span><span class="n">stocks</span><span class="p">.</span><span class="n">ipoyear</span><span class="p">,</span> <span class="n">q</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="nf">list</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">)))</span>
              <span class="p">.</span><span class="nf">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
              <span class="p">.</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
              <span class="p">.</span><span class="nf">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
              <span class="p">.</span><span class="nf">to_frame</span><span class="p">(</span><span class="sh">'</span><span class="s">age</span><span class="sh">'</span><span class="p">)))</span>
<span class="n">data</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">age</span><span class="p">.</span><span class="nf">fillna</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="create-dynamic-size-proxy">Create Dynamic Size Proxy</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">stocks</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
Index: 2412 entries, A to ZUMZ
Data columns (total 3 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   marketcap  2407 non-null   float64
 1   ipoyear    1065 non-null   float64
 2   sector     2372 non-null   object 
dtypes: float64(2), object(1)
memory usage: 139.9+ KB
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">size_factor</span> <span class="o">=</span> <span class="p">(</span><span class="n">monthly_prices</span>
               <span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">data</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="nf">get_level_values</span><span class="p">(</span><span class="sh">'</span><span class="s">date</span><span class="sh">'</span><span class="p">).</span><span class="nf">unique</span><span class="p">(),</span>
                    <span class="n">data</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="nf">get_level_values</span><span class="p">(</span><span class="sh">'</span><span class="s">ticker</span><span class="sh">'</span><span class="p">).</span><span class="nf">unique</span><span class="p">()]</span>
               <span class="p">.</span><span class="nf">sort_index</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
               <span class="p">.</span><span class="nf">pct_change</span><span class="p">()</span>
               <span class="p">.</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
               <span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
               <span class="p">.</span><span class="nf">cumprod</span><span class="p">())</span>
<span class="n">size_factor</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
DatetimeIndex: 207 entries, 2018-03-31 to 2001-01-31
Columns: 1838 entries, A to ZUMZ
dtypes: float64(1838)
memory usage: 2.9 MB
</code></pre></div></div>

<h2 id="create-size-indicator-as-declines-per-period">Create Size Indicator as Declines per Period</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">msize</span> <span class="o">=</span> <span class="p">(</span><span class="n">size_factor</span>
         <span class="p">.</span><span class="nf">mul</span><span class="p">(</span><span class="n">stocks</span>
              <span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">size_factor</span><span class="p">.</span><span class="n">columns</span><span class="p">,</span> <span class="sh">'</span><span class="s">marketcap</span><span class="sh">'</span><span class="p">])).</span><span class="nf">dropna</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">all</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">msize</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">msize</span>
                 <span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">pd</span><span class="p">.</span><span class="nf">qcut</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">q</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="nf">list</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">)))</span>
                        <span class="p">.</span><span class="nf">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
                 <span class="p">.</span><span class="nf">stack</span><span class="p">()</span>
                 <span class="p">.</span><span class="nf">swaplevel</span><span class="p">())</span>
<span class="n">data</span><span class="p">.</span><span class="n">msize</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">msize</span><span class="p">.</span><span class="nf">fillna</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="combine-data">Combine Data</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">stocks</span><span class="p">[[</span><span class="sh">'</span><span class="s">sector</span><span class="sh">'</span><span class="p">]])</span>
<span class="n">data</span><span class="p">.</span><span class="n">sector</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">sector</span><span class="p">.</span><span class="nf">fillna</span><span class="p">(</span><span class="sh">'</span><span class="s">Unknown</span><span class="sh">'</span><span class="p">)</span>

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
MultiIndex: 360752 entries, ('A', Timestamp('2001-01-31 00:00:00', freq='M')) to ('ZUMZ', Timestamp('2018-03-31 00:00:00', freq='M'))
Data columns (total 33 columns):
 #   Column         Non-Null Count   Dtype  
---  ------         --------------   -----  
 0   return_1m      360752 non-null  float64
 1   return_2m      360752 non-null  float64
 2   return_3m      360752 non-null  float64
 3   return_6m      360752 non-null  float64
 4   return_9m      360752 non-null  float64
 5   return_12m     360752 non-null  float64
 6   Mkt-RF         360752 non-null  float64
 7   SMB            360752 non-null  float64
 8   HML            360752 non-null  float64
 9   RMW            360752 non-null  float64
 10  CMA            360752 non-null  float64
 11  momentum_2     360752 non-null  float64
 12  momentum_3     360752 non-null  float64
 13  momentum_6     360752 non-null  float64
 14  momentum_9     360752 non-null  float64
 15  momentum_12    360752 non-null  float64
 16  momentum_3_12  360752 non-null  float64
 17  year           360752 non-null  int64  
 18  month          360752 non-null  int64  
 19  return_1m_t-1  358914 non-null  float64
 20  return_1m_t-2  357076 non-null  float64
 21  return_1m_t-3  355238 non-null  float64
 22  return_1m_t-4  353400 non-null  float64
 23  return_1m_t-5  351562 non-null  float64
 24  return_1m_t-6  349724 non-null  float64
 25  target_1m      358914 non-null  float64
 26  target_2m      357076 non-null  float64
 27  target_3m      355238 non-null  float64
 28  target_6m      349724 non-null  float64
 29  target_12m     338696 non-null  float64
 30  age            360752 non-null  int64  
 31  msize          360752 non-null  float64
 32  sector         360752 non-null  object 
dtypes: float64(29), int64(3), object(1)
memory usage: 100.4+ MB
</code></pre></div></div>

<h2 id="store-data">Store Data</h2>
<p>store the data into an HDF file for later use</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="n">pd</span><span class="p">.</span><span class="nc">HDFStore</span><span class="p">(</span><span class="sh">'</span><span class="s">engineered_features.h5</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">store</span><span class="p">:</span>
    <span class="n">store</span><span class="p">.</span><span class="nf">put</span><span class="p">(</span><span class="sh">'</span><span class="s">engineered_features</span><span class="sh">'</span><span class="p">,</span> <span class="n">data</span><span class="p">.</span><span class="nf">sort_index</span><span class="p">().</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="p">[:,</span> <span class="p">:</span><span class="nf">datetime</span><span class="p">(</span><span class="mi">2024</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">28</span><span class="p">)],</span> <span class="p">:])</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">store</span><span class="p">.</span><span class="nf">info</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.io.pytables.HDFStore'&gt;
File path: engineered_features.h5
/engineered_features            frame        (shape-&gt;[360752,33])
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[Alpha factors are mathematical expressions or models that aim to quantify the skill of an investment strategy in generating excess returns beyond what would be expected given the associated risks i.e. it represents the active return of a portfolio.]]></summary></entry><entry><title type="html">NASDAQ Total View</title><link href="http://localhost:4000/2024/02/19/NASDAQTotalView.html" rel="alternate" type="text/html" title="NASDAQ Total View" /><published>2024-02-19T00:00:00-05:00</published><updated>2024-02-19T00:00:00-05:00</updated><id>http://localhost:4000/2024/02/19/NASDAQTotalView</id><content type="html" xml:base="http://localhost:4000/2024/02/19/NASDAQTotalView.html"><![CDATA[<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="o">%</span><span class="n">pip</span> <span class="n">install</span> <span class="n">tqdm</span>
<span class="o">%</span><span class="n">pip</span> <span class="n">install</span> <span class="n">pytables</span>

<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="kn">from</span> <span class="n">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span> 

<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span> 
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span> 
<span class="kn">import</span> <span class="n">seaborn</span> <span class="k">as</span> <span class="n">sns</span>

</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nasdaq_path</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="sh">'</span><span class="s">nasdaq100</span><span class="sh">'</span><span class="p">)</span>
<span class="c1"># list(nasdaq_path.iterdir())
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tcols</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">openbartime</span><span class="sh">'</span><span class="p">,</span>
         <span class="sh">'</span><span class="s">firsttradetime</span><span class="sh">'</span><span class="p">,</span>
         <span class="sh">'</span><span class="s">highbidtime</span><span class="sh">'</span><span class="p">,</span>
         <span class="sh">'</span><span class="s">highasktime</span><span class="sh">'</span><span class="p">,</span>
         <span class="sh">'</span><span class="s">hightradetime</span><span class="sh">'</span><span class="p">,</span>
         <span class="sh">'</span><span class="s">lowbidtime</span><span class="sh">'</span><span class="p">,</span>
         <span class="sh">'</span><span class="s">lowasktime</span><span class="sh">'</span><span class="p">,</span>
         <span class="sh">'</span><span class="s">lowtradetime</span><span class="sh">'</span><span class="p">,</span>
         <span class="sh">'</span><span class="s">closebartime</span><span class="sh">'</span><span class="p">,</span>
         <span class="sh">'</span><span class="s">lasttradetime</span><span class="sh">'</span><span class="p">]</span>

<span class="n">drop_cols</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">unknowntickvolume</span><span class="sh">'</span><span class="p">,</span>
             <span class="sh">'</span><span class="s">cancelsize</span><span class="sh">'</span><span class="p">,</span>
             <span class="sh">'</span><span class="s">tradeatcrossorlocked</span><span class="sh">'</span><span class="p">]</span>

<span class="n">columns</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">volumeweightprice</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">price</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">finravolume</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">fvolume</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">finravolumeweightprice</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">fprice</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">uptickvolume</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">up</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">downtickvolume</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">down</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">repeatuptickvolume</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">rup</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">repeatdowntickvolume</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">rdown</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">firsttradeprice</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">first</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">hightradeprice</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">high</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">lowtradeprice</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">low</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">lasttradeprice</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">last</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">nbboquotecount</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">nbbo</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">totaltrades</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">ntrades</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">openbidprice</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">obprice</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">openbidsize</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">obsize</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">openaskprice</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">oaprice</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">openasksize</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">oasize</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">highbidprice</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">hbprice</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">highbidsize</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">hbsize</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">highaskprice</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">haprice</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">highasksize</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">hasize</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">lowbidprice</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">lbprice</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">lowbidsize</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">lbsize</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">lowaskprice</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">laprice</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">lowasksize</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">lasize</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">closebidprice</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">cbprice</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">closebidsize</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">cbsize</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">closeaskprice</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">caprice</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">closeasksize</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">casize</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">firsttradesize</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">firstsize</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">hightradesize</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">highsize</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">lowtradesize</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">lowsize</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">lasttradesize</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">lastsize</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">tradetomidvolweight</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">volweight</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">tradetomidvolweightrelative</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">volweightrel</span><span class="sh">'</span><span class="p">}</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">path</span> <span class="o">=</span> <span class="n">nasdaq_path</span><span class="o">/</span> <span class="sh">'</span><span class="s">1min_taq</span><span class="sh">'</span>
<span class="k">if</span> <span class="ow">not</span> <span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">():</span>
    <span class="n">path</span><span class="p">.</span><span class="nf">mkdir</span><span class="p">(</span><span class="n">parents</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    
<span class="n">data</span> <span class="o">=</span> <span class="p">[]</span> 
    
<span class="c1"># read files and create progress bar
</span><span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">nasdaq_path</span><span class="p">.</span><span class="nf">glob</span><span class="p">(</span><span class="sh">'</span><span class="s">*/**/*.csv.gz</span><span class="sh">'</span><span class="p">))):</span>
    <span class="n">data</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">parse_dates</span><span class="o">=</span><span class="p">[[</span><span class="sh">'</span><span class="s">Date</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">TimeBarStart</span><span class="sh">'</span><span class="p">]])</span>
                    <span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="nb">str</span><span class="p">.</span><span class="n">lower</span><span class="p">)</span>
                    <span class="p">.</span><span class="nf">drop</span><span class="p">(</span><span class="n">tcols</span> <span class="o">+</span> <span class="n">drop_cols</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
                    <span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="n">columns</span><span class="p">)</span>
                    <span class="p">.</span><span class="nf">set_index</span><span class="p">(</span><span class="sh">'</span><span class="s">date_timebarstart</span><span class="sh">'</span><span class="p">)</span>
                    <span class="p">.</span><span class="nf">sort_index</span><span class="p">()</span>
                    <span class="p">.</span><span class="nf">between_time</span><span class="p">(</span><span class="sh">'</span><span class="s">9:30</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">16:00</span><span class="sh">'</span><span class="p">)</span>
                    <span class="p">.</span><span class="nf">set_index</span><span class="p">(</span><span class="sh">'</span><span class="s">ticker</span><span class="sh">'</span><span class="p">,</span> <span class="n">append</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
                    <span class="p">.</span><span class="nf">swaplevel</span><span class="p">()</span>
                    <span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">tradeat</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">at</span><span class="sh">'</span><span class="p">)))</span>
    
<span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">concat</span><span class="p">(</span><span class="n">data</span><span class="p">).</span><span class="nf">apply</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">to_numeric</span><span class="p">,</span> <span class="n">downcast</span><span class="o">=</span><span class="sh">'</span><span class="s">integer</span><span class="sh">'</span><span class="p">)</span>
<span class="n">data</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="nf">rename</span><span class="p">([</span><span class="sh">'</span><span class="s">ticker</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">date_time</span><span class="sh">'</span><span class="p">],</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="n">show_counts</span><span class="o">=</span><span class="bp">True</span><span class="p">))</span>
<span class="n">data</span><span class="p">.</span><span class="nf">to_hdf</span><span class="p">(</span><span class="n">nasdaq_path</span> <span class="o">/</span> <span class="sh">'</span><span class="s">algoseek.h5</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">min_taq</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="n">null_counts</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="nf">unique</span><span class="p">(</span><span class="sh">'</span><span class="s">ticker</span><span class="sh">'</span><span class="p">))</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">constituents</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="n">data</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="nf">get_level_values</span><span class="p">(</span><span class="sh">'</span><span class="s">date_time</span><span class="sh">'</span><span class="p">).</span><span class="n">date</span><span class="p">,</span> <span class="sh">'</span><span class="s">ticker</span><span class="sh">'</span><span class="p">])</span>
                <span class="p">.</span><span class="nf">size</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">unstack</span><span class="p">(</span><span class="sh">'</span><span class="s">ticker</span><span class="sh">'</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">notnull</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">nan</span><span class="p">))</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">constituents</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">to_datetime</span><span class="p">(</span><span class="n">constituents</span><span class="p">.</span><span class="n">index</span><span class="p">)</span>
<span class="n">constituents</span> <span class="o">=</span> <span class="n">constituents</span><span class="p">.</span><span class="nf">resample</span><span class="p">(</span><span class="sh">'</span><span class="s">M</span><span class="sh">'</span><span class="p">).</span><span class="nf">max</span><span class="p">()</span>
<span class="n">constituents</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">constituents</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">date</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">))</span>
<span class="n">mask</span> <span class="o">=</span> <span class="n">constituents</span><span class="p">.</span><span class="n">T</span><span class="p">.</span><span class="nf">isnull</span><span class="p">()</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="n">constituents</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="n">mask</span><span class="o">=</span><span class="n">mask</span><span class="p">,</span> <span class="n">cbar</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">Blues_r</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">''</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">suptitle</span><span class="p">(</span><span class="sh">'</span><span class="s">NASDAQ100 Constituents (2015)</span><span class="sh">'</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">();</span>
</code></pre></div></div>

<p><img src="http://localhost:4000/assets/images/NASDAQTOtalView_files/myimg.png" alt="image" width="3000" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[```python]]></summary></entry><entry><title type="html">Reading and Writing to Excel Sheets Dynamically</title><link href="http://localhost:4000/2023/11/18/DynamicExcel.html" rel="alternate" type="text/html" title="Reading and Writing to Excel Sheets Dynamically" /><published>2023-11-18T00:00:00-05:00</published><updated>2023-11-18T00:00:00-05:00</updated><id>http://localhost:4000/2023/11/18/DynamicExcel</id><content type="html" xml:base="http://localhost:4000/2023/11/18/DynamicExcel.html"><![CDATA[<p>For work, I had an excel spreadsheet of data that had about ten input values that were then fed through a TON of nested formulas to get some output value. I needed to do this all without using / opening Microsoft Excel or LibreOffice</p>

<p>A lot of the available libraries in Python can either read in the formulas OR read in the data, but not both operations simultaneously. An application (Excel / LibreOffice) would need to be opened or the file would have to be manually saved.</p>

<p>This Stack Overflow issue sums up what I was struggling with : <a href="https://stackoverflow.com/questions/73851931/updating-and-saving-excel-file-using-openpyxl-and-then-reading-it-gives-none-val">updating and saving excel file‚Ä¶</a></p>

<p>openpyxl is good for interacting with spreadsheets i.e. reading and writing. pycel is good for turning cells into executable python code.</p>

<p>The solution was to use pycel to turn the spreadsheets into executable code, the using openpyxl to manipulate the cell values. Saving and closing with openpyxl, then turning the sheets back into executable code allows us to see updated outputs after the inputs passed through the formulas.</p>

<p>One of the comments on this <a href="https://stackoverflow.com/questions/66998366/can-a-pycel-object-be-saved-as-an-excel-workbook">issue</a> reads :</p>

<p>‚Äú‚Ä¶while openpyxl has the computed values available for formula cells for a workbook it read in, it does not really allow those computed values to be saved back into a workbook it writes‚Äù</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">excel</span> <span class="o">=</span> <span class="nc">ExcelCompiler</span><span class="p">(</span><span class="n">filename</span><span class="o">=</span><span class="sh">"</span><span class="s">myFile.xlsx</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># B23 is a cell that contains a value that was calculated by some number of formulas 
</span><span class="n">originalValue</span> <span class="o">=</span> <span class="n">excel</span><span class="p">.</span><span class="nf">evaluate</span><span class="p">(</span><span class="sh">"</span><span class="s">SheetNumber1!B23</span><span class="sh">"</span><span class="p">)</span>

<span class="n">wb</span> <span class="o">=</span> <span class="nf">load_workbook</span><span class="p">(</span><span class="sh">'</span><span class="s">myFile.xlsx</span><span class="sh">'</span><span class="p">,</span><span class="n">data_only</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="n">sheet</span> <span class="o">=</span> <span class="n">wb</span><span class="p">[</span><span class="sh">'</span><span class="s">SheetNumber1</span><span class="sh">'</span><span class="p">]</span>

<span class="c1"># modify your data in whatever way needed 
</span>
<span class="c1"># say you want to change cell B1 in SheetNumber1 to be 5 
</span><span class="n">sheet</span><span class="p">[</span><span class="sh">'</span><span class="s">B1</span><span class="sh">'</span><span class="p">].</span><span class="n">value</span> <span class="o">=</span> <span class="mi">5</span> 

<span class="c1"># save and close 
</span><span class="n">wb</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="sh">"</span><span class="s">myFile.xlsx</span><span class="sh">"</span><span class="p">)</span>

<span class="n">wb</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>

 <span class="c1"># read in data 
</span><span class="n">excel</span> <span class="o">=</span> <span class="nc">ExcelCompiler</span><span class="p">(</span><span class="n">filename</span><span class="o">=</span><span class="sh">"</span><span class="s">myFile.xlsx</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># this contains the new value after changing cell B1 and running it through formulas 
</span><span class="n">updatedValue</span> <span class="o">=</span> <span class="n">excel</span><span class="p">.</span><span class="nf">evaluate</span><span class="p">(</span><span class="sh">"</span><span class="s">SheetNumber1!B23</span><span class="sh">"</span><span class="p">)</span>

</code></pre></div></div>

<p>The time it takes for this code to run is dependent on the amount of data you have in your spreadsheet. The spreadsheet I was working with had a lot of data to be calculated so it took about 45 seconds to load the spreadsheets both times (one to change formulas, the other time to read in the updated data).</p>

<p>The less data you have to read, the less time it takes to open the file.</p>

<p>This code works with any system and doesn‚Äôt require a download of LibreOffice or Microsoft Excel.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[For work, I had an excel spreadsheet of data that had about ten input values that were then fed through a TON of nested formulas to get some output value. I needed to do this all without using / opening Microsoft Excel or LibreOffice]]></summary></entry></feed>